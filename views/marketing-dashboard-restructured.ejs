<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>SaleSight - Marketing Intelligence</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css"
    />
    <link rel="stylesheet" href="/css/modern.css" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  </head>

  <body>
    <%- include('partials/navbar') %>

    <div class="main-layout-no-sidebar">
      <div class="main-content-full">
        <div class="container-fluid px-4 py-6">
          <div class="page-header mb-6">
            <div class="row align-items-center">
              <div class="col">
                <h1 class="page-title">üìä Marketing Intelligence Dashboard</h1>
                <p class="page-subtitle">
                  Upload your data and get AI-powered insights for better
                  marketing decisions
                </p>
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-12">
              <!-- Step 1: Data Upload Section -->
              <div class="card mb-8" id="dataUploadSection">
                <div class="card-header">
                  <h5 class="card-title">
                    üìÅ Step 1: Upload Your Marketing Data
                  </h5>
                </div>
                <div class="card-body">
                  <div class="row">
                    <div class="col-md-8">
                      <div class="alert alert-info">
                        <h6 class="mb-2">üöÄ Get Started</h6>
                        <p class="mb-2">
                          Upload your marketing and business data to generate
                          personalized insights and analytics.
                        </p>
                        <ul class="mb-2">
                          <li>
                            <strong>Campaign Data:</strong> Facebook, Google,
                            TikTok advertising data
                          </li>
                          <li>
                            <strong>Business Data:</strong> Revenue, orders,
                            customer metrics
                          </li>
                          <li>
                            <strong>Supported Formats:</strong> CSV, Excel
                            (.xlsx, .xls)
                          </li>
                        </ul>
                        <div class="alert alert-warning mt-2 mb-0">
                          <small>
                            <strong>üí° Tip:</strong> For best performance,
                            upload 1-3 files at a time. Large datasets will be
                            processed in batches automatically.
                          </small>
                        </div>
                      </div>

                      <div
                        class="upload-status"
                        id="uploadStatus"
                        style="display: none"
                      >
                        <div class="alert alert-success">
                          <i class="bi bi-check-circle"></i>
                          <span id="uploadStatusText"
                            >Data uploaded successfully!</span
                          >
                        </div>
                      </div>

                      <!-- Uploaded Data Section -->
                      <div
                        id="uploadedDataSection"
                        class="mt-4"
                        style="display: none"
                      >
                        <div class="card">
                          <div class="card-header">
                            <h5>
                              <i class="bi bi-folder-check"></i> Uploaded Data
                            </h5>
                          </div>
                          <div class="card-body">
                            <div id="uploadedDataList">
                              <!-- Uploaded files will be listed here -->
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="col-md-4">
                      <div class="d-grid gap-2">
                        <button
                          class="btn btn-primary btn-lg"
                          id="uploadCustomDataBtn"
                        >
                          <i class="bi bi-cloud-upload"></i> Upload Data
                        </button>
                        <button
                          class="btn btn-outline-secondary"
                          id="dataGuideBtn"
                        >
                          <i class="bi bi-info-circle"></i> Data Guide &
                          Templates
                        </button>
                        <button
                          class="btn btn-outline-danger"
                          onclick="clearAllData()"
                          title="Clear all marketing data"
                        >
                          <i class="bi bi-trash"></i> Clear Data
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Step 2: Metric Selection Section -->
              <div
                class="card mb-8"
                id="metricSelectionSection"
                style="display: none"
              >
                <div class="card-header">
                  <h5 class="card-title">
                    üìä Step 2: Select Metrics to Analyze
                  </h5>
                </div>
                <div class="card-body">
                  <div class="alert alert-success mb-4">
                    <i class="bi bi-check-circle"></i> Data uploaded
                    successfully! Now choose which metrics you'd like to
                    analyze.
                  </div>

                  <div class="row">
                    <div class="col-md-6">
                      <h6 class="mb-3">üìà Financial Metrics</h6>
                      <div class="metric-selector-grid">
                        <div class="metric-selector-item" data-metric="roi">
                          <input
                            type="checkbox"
                            id="metric-roi"
                            class="metric-checkbox"
                          />
                          <label for="metric-roi" class="metric-label">
                            <div class="metric-icon">üí∞</div>
                            <div class="metric-info">
                              <strong>ROI</strong>
                              <small>Return on Investment</small>
                            </div>
                          </label>
                        </div>

                        <div class="metric-selector-item" data-metric="roas">
                          <input
                            type="checkbox"
                            id="metric-roas"
                            class="metric-checkbox"
                          />
                          <label for="metric-roas" class="metric-label">
                            <div class="metric-icon">üìä</div>
                            <div class="metric-info">
                              <strong>ROAS</strong>
                              <small>Return on Ad Spend</small>
                            </div>
                          </label>
                        </div>

                        <div class="metric-selector-item" data-metric="cogs">
                          <input
                            type="checkbox"
                            id="metric-cogs"
                            class="metric-checkbox"
                          />
                          <label for="metric-cogs" class="metric-label">
                            <div class="metric-icon">üì¶</div>
                            <div class="metric-info">
                              <strong>COGS</strong>
                              <small>Cost of Goods Sold</small>
                            </div>
                          </label>
                        </div>

                        <div class="metric-selector-item" data-metric="cac">
                          <input
                            type="checkbox"
                            id="metric-cac"
                            class="metric-checkbox"
                          />
                          <label for="metric-cac" class="metric-label">
                            <div class="metric-icon">üë•</div>
                            <div class="metric-info">
                              <strong>CAC</strong>
                              <small>Customer Acquisition Cost</small>
                            </div>
                          </label>
                        </div>
                      </div>
                    </div>

                    <div class="col-md-6">
                      <h6 class="mb-3">üéØ Performance Metrics</h6>
                      <div class="metric-selector-grid">
                        <div class="metric-selector-item" data-metric="ctr">
                          <input
                            type="checkbox"
                            id="metric-ctr"
                            class="metric-checkbox"
                          />
                          <label for="metric-ctr" class="metric-label">
                            <div class="metric-icon">üéØ</div>
                            <div class="metric-info">
                              <strong>CTR</strong>
                              <small>Click-Through Rate</small>
                            </div>
                          </label>
                        </div>

                        <div class="metric-selector-item" data-metric="cpc">
                          <input
                            type="checkbox"
                            id="metric-cpc"
                            class="metric-checkbox"
                          />
                          <label for="metric-cpc" class="metric-label">
                            <div class="metric-icon">üí∏</div>
                            <div class="metric-info">
                              <strong>CPC</strong>
                              <small>Cost Per Click</small>
                            </div>
                          </label>
                        </div>

                        <div
                          class="metric-selector-item"
                          data-metric="conversion"
                        >
                          <input
                            type="checkbox"
                            id="metric-conversion"
                            class="metric-checkbox"
                          />
                          <label for="metric-conversion" class="metric-label">
                            <div class="metric-icon">üîÑ</div>
                            <div class="metric-info">
                              <strong>Conversion Rate</strong>
                              <small>Orders √∑ Clicks</small>
                            </div>
                          </label>
                        </div>

                        <div
                          class="metric-selector-item"
                          data-metric="platform-performance"
                        >
                          <input
                            type="checkbox"
                            id="metric-platform"
                            class="metric-checkbox"
                          />
                          <label for="metric-platform" class="metric-label">
                            <div class="metric-icon">üì±</div>
                            <div class="metric-info">
                              <strong>Platform Analysis</strong>
                              <small>Facebook, Google, TikTok</small>
                            </div>
                          </label>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div class="text-center mt-4">
                    <button
                      class="btn btn-primary btn-lg"
                      id="generateSelectedInsights"
                      disabled
                    >
                      <i class="bi bi-magic"></i> Generate Selected Insights
                    </button>
                  </div>
                </div>
              </div>

              <!-- Step 3: Dynamic Insights Container -->
              <div id="dynamicInsightsContainer" style="display: none">
                <!-- Selected metrics will be displayed here -->
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Custom Data Upload Modal -->
    <div class="modal fade" id="customDataUploadModal" tabindex="-1">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Upload Custom Marketing Data</h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
            ></button>
          </div>
          <div class="modal-body">
            <form id="customDataUploadForm">
              <div class="alert alert-info">
                <h6 class="mb-2">üìÅ Supported File Formats</h6>
                <p class="mb-0">
                  Upload CSV or Excel files (.csv, .xlsx, .xls) with your
                  marketing and business data.
                </p>
              </div>

              <div class="row">
                <div class="col-md-6">
                  <div class="card">
                    <div class="card-header">
                      <h6>Campaign Data Files</h6>
                    </div>
                    <div class="card-body">
                      <div class="mb-3">
                        <label class="form-label">Upload Campaign Data</label>
                        <div id="campaignFileContainer">
                          <div class="input-group mb-2">
                            <input
                              type="file"
                              class="form-control campaign-file-input"
                              accept=".csv,.xlsx,.xls"
                              data-index="0"
                            />
                            <button
                              class="btn btn-outline-success"
                              type="button"
                              onclick="addCampaignFileInput()"
                            >
                              <i class="bi bi-plus"></i>
                            </button>
                          </div>
                        </div>
                        <small class="form-text text-muted"
                          >Facebook, Google, TikTok campaign data. Click + to
                          add more files.</small
                        >
                      </div>
                      <div class="required-columns">
                        <h6>Required Columns (flexible naming):</h6>
                        <ul>
                          <li>
                            <strong>Campaign:</strong> campaign_name, campaign
                          </li>
                          <li><strong>Platform:</strong> platform, tactic</li>
                          <li><strong>Date:</strong> date (YYYY-MM-DD)</li>
                          <li><strong>Spend:</strong> spend, cost</li>
                          <li>
                            <strong>Impressions:</strong> impressions,
                            impression
                          </li>
                          <li><strong>Clicks:</strong> clicks, click</li>
                          <li>
                            <strong>Revenue:</strong> attributed_revenue,
                            "attributed revenue"
                          </li>
                        </ul>
                        <small class="text-muted"
                          >System auto-detects column variations</small
                        >
                      </div>
                    </div>
                  </div>
                </div>

                <div class="col-md-6">
                  <div class="card">
                    <div class="card-header">
                      <h6>Business Metrics File</h6>
                    </div>
                    <div class="card-body">
                      <div class="mb-3">
                        <label class="form-label">Upload Business Data</label>
                        <input
                          type="file"
                          class="form-control"
                          id="businessDataFile"
                          accept=".csv,.xlsx,.xls"
                        />
                        <small class="form-text text-muted"
                          >Revenue, orders, customer data</small
                        >
                      </div>
                      <div class="required-columns">
                        <h6>Required Columns (flexible naming):</h6>
                        <ul>
                          <li><strong>Date:</strong> date (YYYY-MM-DD)</li>
                          <li>
                            <strong>Revenue:</strong> total_revenue, "total
                            revenue"
                          </li>
                          <li>
                            <strong>Orders:</strong> total_orders, "# of orders"
                          </li>
                          <li>
                            <strong>Customers:</strong> new_customers, "new
                            customers"
                          </li>
                          <li><strong>COGS:</strong> cogs, COGS</li>
                        </ul>
                        <small class="text-muted"
                          >System auto-detects column variations</small
                        >
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <div class="mt-4">
                <div class="alert alert-warning">
                  <h6 class="mb-2">üìã Data Format Guidelines</h6>
                  <ul class="mb-0">
                    <li>
                      <strong>Date Format:</strong> YYYY-MM-DD (e.g.,
                      2024-01-15)
                    </li>
                    <li>
                      <strong>Numbers:</strong> No currency symbols, use decimal
                      points
                    </li>
                    <li>
                      <strong>Platform Names:</strong> Exactly "Facebook",
                      "Google", or "TikTok"
                    </li>
                    <li>
                      <strong>Headers:</strong> First row must contain column
                      names
                    </li>
                  </ul>
                </div>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Cancel
            </button>
            <button
              type="button"
              class="btn btn-primary"
              onclick="uploadCustomData()"
            >
              <i class="bi bi-upload"></i> Upload Data
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Data Guide Modal -->
    <div class="modal fade" id="dataGuideModal" tabindex="-1">
      <div class="modal-dialog modal-xl">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">üìä Marketing Data Guide & Definitions</h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
            ></button>
          </div>
          <div class="modal-body">
            <div class="row">
              <div class="col-md-6">
                <div class="card mb-4">
                  <div class="card-header">
                    <h6>üí∞ Financial Metrics</h6>
                  </div>
                  <div class="card-body">
                    <div class="metric-definition mb-3">
                      <strong>ROI (Return on Investment)</strong>
                      <p class="mb-1 text-muted">
                        Formula: (Revenue - Spend) √∑ Spend √ó 100
                      </p>
                      <p class="small">
                        Measures the profitability of your marketing investment.
                        Higher is better.
                      </p>
                    </div>
                    <div class="metric-definition mb-3">
                      <strong>ROAS (Return on Ad Spend)</strong>
                      <p class="mb-1 text-muted">Formula: Revenue √∑ Spend</p>
                      <p class="small">
                        Shows how much revenue you generate for every dollar
                        spent on advertising.
                      </p>
                    </div>
                    <div class="metric-definition mb-3">
                      <strong>COGS (Cost of Goods Sold)</strong>
                      <p class="mb-1 text-muted">
                        Direct costs of producing goods sold
                      </p>
                      <p class="small">
                        Includes materials, labor, and direct overhead costs for
                        products sold.
                      </p>
                    </div>
                    <div class="metric-definition">
                      <strong>CAC (Customer Acquisition Cost)</strong>
                      <p class="mb-1 text-muted">
                        Formula: Total Spend √∑ New Customers
                      </p>
                      <p class="small">
                        The cost to acquire one new customer through marketing
                        efforts.
                      </p>
                    </div>
                  </div>
                </div>
              </div>

              <div class="col-md-6">
                <div class="card mb-4">
                  <div class="card-header">
                    <h6>üéØ Performance Metrics</h6>
                  </div>
                  <div class="card-body">
                    <div class="metric-definition mb-3">
                      <strong>CTR (Click-Through Rate)</strong>
                      <p class="mb-1 text-muted">
                        Formula: Clicks √∑ Impressions √ó 100
                      </p>
                      <p class="small">
                        Percentage of people who clicked your ad after seeing
                        it. Higher indicates better ad relevance.
                      </p>
                    </div>
                    <div class="metric-definition mb-3">
                      <strong>CPC (Cost Per Click)</strong>
                      <p class="mb-1 text-muted">
                        Formula: Total Spend √∑ Total Clicks
                      </p>
                      <p class="small">
                        Average amount you pay for each click on your ads. Lower
                        is generally better.
                      </p>
                    </div>
                    <div class="metric-definition mb-3">
                      <strong>Conversion Rate</strong>
                      <p class="mb-1 text-muted">
                        Formula: Orders √∑ Clicks √ó 100
                      </p>
                      <p class="small">
                        Percentage of clicks that result in a purchase or
                        desired action.
                      </p>
                    </div>
                    <div class="metric-definition">
                      <strong>Impressions</strong>
                      <p class="mb-1 text-muted">
                        Number of times your ad was shown
                      </p>
                      <p class="small">
                        Total reach of your advertising campaigns across all
                        platforms.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div class="card">
              <div class="card-header">
                <h6>üìÑ Sample Data Templates</h6>
              </div>
              <div class="card-body">
                <div class="row">
                  <div class="col-md-6">
                    <h6>Marketing Campaign Data Templates:</h6>
                    <p class="small text-muted mb-2">Standard Format:</p>
                    <pre
                      class="bg-light p-3 small mb-3"
                    ><code>campaign_name,platform,date,spend,impressions,clicks,attributed_revenue
Summer Sale,Facebook,2024-01-01,1000,50000,2500,5000
Holiday Campaign,Google,2024-01-02,1500,75000,3000,7500
Brand Awareness,TikTok,2024-01-03,800,40000,1600,3200</code></pre>

                    <p class="small text-muted mb-2">
                      TikTok Format (also supported):
                    </p>
                    <pre
                      class="bg-light p-3 small"
                    ><code>date,tactic,state,campaign,impression,clicks,spend,attributed revenue
2025-05-16,Retargeting,CA,TikTok - Campaign,67236,1018,821.74,2232.18</code></pre>
                  </div>
                  <div class="col-md-6">
                    <h6>Business Metrics Data Templates:</h6>
                    <p class="small text-muted mb-2">Standard Format:</p>
                    <pre
                      class="bg-light p-3 small mb-3"
                    ><code>date,total_revenue,total_orders,new_customers,cogs
2024-01-01,15000,150,45,9000
2024-01-02,18000,180,52,10800
2024-01-03,12000,120,38,7200</code></pre>

                    <p class="small text-muted mb-2">
                      Assessment Format (also supported):
                    </p>
                    <pre
                      class="bg-light p-3 small"
                    ><code>date,# of orders,# of new orders,new customers,total revenue,gross profit,COGS
2025-05-16,2452,987,989,238010.95,124434.71,113576.24</code></pre>
                  </div>
                </div>
                <div class="mt-3">
                  <button
                    class="btn btn-outline-primary btn-sm"
                    onclick="downloadTemplate('campaign')"
                  >
                    <i class="bi bi-download"></i> Download Campaign Template
                  </button>
                  <button
                    class="btn btn-outline-primary btn-sm ms-2"
                    onclick="downloadTemplate('business')"
                  >
                    <i class="bi bi-download"></i> Download Business Template
                  </button>
                </div>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-primary"
              data-bs-dismiss="modal"
            >
              Got it!
            </button>
          </div>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
            // Global variables
            let marketingData = null;
            let selectedMetrics = new Set();
            let uploadedFiles = []; // Track uploaded files
            let fileInputIndex = 1; // For multiple file inputs

            // Global functions (accessible from onclick handlers)
            async function clearAllDataFromNotification() {
              // Close the notification first
              const notifications = document.querySelectorAll('.alert-warning');
              notifications.forEach(notification => {
                const bsAlert = new bootstrap.Alert(notification);
                bsAlert.close();
              });

              // Then clear the data
              await clearAllData();
            }

            async function clearAllData() {
              if (!confirm("Are you sure you want to clear all marketing data? This action cannot be undone.")) {
                return;
              }

              try {
                // Show loading indicator
                const loadingDiv = document.createElement('div');
                loadingDiv.className = 'alert alert-info position-fixed';
                loadingDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; max-width: 300px;';
                loadingDiv.innerHTML = 'üîÑ Clearing data...';
                document.body.appendChild(loadingDiv);

                const response = await fetch("/api/marketing/clear-data", {
                  method: "DELETE",
                  headers: {
                    "Accept": "application/json",
                  },
                });

                const result = await response.json();

                if (response.ok) {
                  // Remove loading indicator
                  loadingDiv.remove();

                  // Show success message
                  const successDiv = document.createElement('div');
                  successDiv.className = 'alert alert-success position-fixed';
                  successDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; max-width: 300px;';
                  successDiv.innerHTML = `‚úÖ Data cleared! Deleted ${result.deleted.campaigns} campaigns and ${result.deleted.businessMetrics} business metrics.`;
                  document.body.appendChild(successDiv);

                  // Auto-hide success message and refresh
                  setTimeout(() => {
                    successDiv.remove();
                    window.location.reload();
                  }, 2000);
                } else {
                  throw new Error(result.error || "Failed to clear data");
                }
              } catch (error) {
                console.error("Error clearing data:", error);

                // Remove loading indicator
                const loadingDiv = document.querySelector('.alert-info');
                if (loadingDiv) loadingDiv.remove();

                // Show error message
                const errorDiv = document.createElement('div');
                errorDiv.className = 'alert alert-danger position-fixed';
                errorDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; max-width: 300px;';
                errorDiv.innerHTML = `‚ùå Error: ${error.message}`;
                document.body.appendChild(errorDiv);

                // Auto-hide error message
                setTimeout(() => {
                  errorDiv.remove();
                }, 5000);
              }
            }

            async function showDebugInfo() {
              try {
                const response = await fetch("/api/marketing/debug-data");
                const debug = await response.json();

                let debugText = "üîç Current Database Data:\n\n";
                debugText += `User ID: ${debug.userId}\n`;
                debugText += `Total Campaigns: ${debug.totalCampaigns}\n`;
                debugText += `Business Metrics: ${debug.businessMetrics}\n\n`;
                debugText += "Campaigns by Platform:\n";

                if (debug.campaignsByPlatform.length === 0) {
                  debugText += "  (No campaign data found)\n";
                } else {
                  debug.campaignsByPlatform.forEach(p => {
                    debugText += `  ${p._id}: ${p.count} records\n`;
                  });
                }

                alert(debugText);
              } catch (error) {
                alert("Error getting debug info: " + error.message);
              }
            }

            // Multiple file upload functions
            function addCampaignFileInput() {
              const container = document.getElementById('campaignFileContainer');
              const newInputGroup = document.createElement('div');
              newInputGroup.className = 'input-group mb-2';
              newInputGroup.innerHTML = `
                <input
                  type="file"
                  class="form-control campaign-file-input"
                  accept=".csv,.xlsx,.xls"
                  data-index="${fileInputIndex}"
                />
                <button class="btn btn-outline-danger" type="button" onclick="removeCampaignFileInput(this)">
                  <i class="bi bi-dash"></i>
                </button>
              `;
              container.appendChild(newInputGroup);
              fileInputIndex++;
            }

            function removeCampaignFileInput(button) {
              button.parentElement.remove();
            }

            function getAllCampaignFiles() {
              const inputs = document.querySelectorAll('.campaign-file-input');
              const files = [];
              inputs.forEach(input => {
                if (input.files && input.files[0]) {
                  files.push(input.files[0]);
                }
              });
              return files;
            }

            function addToUploadedFiles(fileName, fileType, recordCount) {
              uploadedFiles.push({
                name: fileName,
                type: fileType,
                records: recordCount,
                uploadTime: new Date().toLocaleString()
              });
              updateUploadedDataDisplay();
            }

            function updateUploadedDataDisplay() {
              const section = document.getElementById('uploadedDataSection');
              const list = document.getElementById('uploadedDataList');

              if (uploadedFiles.length === 0) {
                section.style.display = 'none';
                return;
              }

              section.style.display = 'block';

              let html = '<div class="row">';
              uploadedFiles.forEach((file, index) => {
                const platform = file.name.includes('Facebook') ? 'Facebook' :
                                file.name.includes('Google') ? 'Google' :
                                file.name.includes('TikTok') ? 'TikTok' : 'Campaign';

                html += `
                  <div class="col-md-6 mb-3">
                    <div class="card">
                      <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start">
                          <div>
                            <h6 class="card-title">
                              <i class="bi bi-file-earmark-${file.type === 'business' ? 'text' : 'spreadsheet'}"></i>
                              ${file.name}
                            </h6>
                            <p class="card-text">
                              <small class="text-muted">
                                ${file.type === 'business' ? 'Business Data' : platform + ' Campaign Data'}<br>
                                ${file.records} records<br>
                                Uploaded: ${file.uploadTime}
                              </small>
                            </p>
                          </div>
                          <div class="btn-group-vertical">
                            <button class="btn btn-sm btn-outline-info" onclick="previewFileData('${file.name}', ${index})">
                              <i class="bi bi-eye"></i> Preview
                            </button>
                            <button class="btn btn-sm btn-outline-danger" onclick="removeUploadedFile(${index})">
                              <i class="bi bi-trash"></i> Remove
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                `;
              });
              html += '</div>';

              list.innerHTML = html;
            }

            function previewFileData(fileName, index) {
              const file = uploadedFiles[index];
              alert(`üìä File Preview: ${file.name}\n\nType: ${file.type === 'business' ? 'Business Data' : 'Campaign Data'}\nRecords: ${file.records}\nUploaded: ${file.uploadTime}`);
            }

            function removeUploadedFile(index) {
              if (confirm(`Are you sure you want to remove ${uploadedFiles[index].name} from the uploaded data list?`)) {
                uploadedFiles.splice(index, 1);
                updateUploadedDataDisplay();
              }
            }

            document.addEventListener("DOMContentLoaded", function () {
              // Check for existing data on page load
              showDebugInfoOnLoad();

              // Event listeners
              document
                .getElementById("uploadCustomDataBtn")
                .addEventListener("click", showCustomDataUpload);
              document
                .getElementById("dataGuideBtn")
                .addEventListener("click", showDataGuide);
              document
                .getElementById("generateSelectedInsights")
                .addEventListener("click", generateSelectedInsights);

              // Metric selection handling
              document.querySelectorAll(".metric-checkbox").forEach((checkbox) => {
                checkbox.addEventListener("change", handleMetricSelection);
              });

              function showCustomDataUpload() {
                new bootstrap.Modal(
                  document.getElementById("customDataUploadModal")
                ).show();
              }

              function showDataGuide() {
                new bootstrap.Modal(document.getElementById("dataGuideModal")).show();
              }

              function handleMetricSelection() {
                const checkedBoxes = document.querySelectorAll(
                  ".metric-checkbox:checked"
                );
                const generateBtn = document.getElementById(
                  "generateSelectedInsights"
                );

                selectedMetrics.clear();
                checkedBoxes.forEach((checkbox) => {
                  selectedMetrics.add(
                    checkbox.closest(".metric-selector-item").dataset.metric
                  );
                });

                generateBtn.disabled = selectedMetrics.size === 0;
              }

              async function uploadCustomData() {
                // Check if user is authenticated
                <% if (!user) { %>
                showError("Please log in to upload data. Redirecting to login...");
                setTimeout(() => {
                  window.location.href = "/login";
                }, 2000);
                return;
                <% } %>

                const campaignFiles = getAllCampaignFiles();
                const businessFile =
                  document.getElementById("businessDataFile").files[0];

                if (campaignFiles.length === 0 && !businessFile) {
                  showError("Please select at least one file to upload.");
                  return;
                }

                const formData = new FormData();

                // Add campaign files
                for (let i = 0; i < campaignFiles.length; i++) {
                  formData.append("campaignFiles", campaignFiles[i]);
                }

                // Add business file
                if (businessFile) {
                  formData.append("businessFile", businessFile);
                }

          try {
            showLoading();

            // Start polling for real progress updates
            const progressInterval = startProgressPolling();

            console.log("Making upload request...");
            const response = await fetch("/api/marketing/upload-custom", {
              method: "POST",
              headers: {
                "Accept": "application/json",
              },
              body: formData,
            });

            console.log("Response status:", response.status);
            console.log("Response headers:", response.headers.get('content-type'));

            const result = await response.json();
            console.log("Response result:", result);

            // Stop polling and show completion
            clearInterval(progressInterval);
            updateLoadingProgress(100, "Complete!", "Data processing finished");

                  if (response.ok) {
                    bootstrap.Modal.getInstance(
                      document.getElementById("customDataUploadModal")
                    ).hide();

                    // Add uploaded files to the list
                    campaignFiles.forEach(file => {
                      addToUploadedFiles(file.name, 'campaign', Math.round(result.processed.campaigns / campaignFiles.length));
                    });
                    if (businessFile) {
                      addToUploadedFiles(businessFile.name, 'business', result.processed.businessMetrics);
                    }

                    showUploadSuccess(result);

                    // Clear file inputs
                    document.querySelectorAll('.campaign-file-input').forEach(input => {
                      input.value = "";
                    });
                    document.getElementById("businessDataFile").value = "";

                    // Show metric selection
                    showMetricSelection();
                  } else if (response.status === 401) {
                    // Authentication required
                    showError(
                      "Please log in to upload data. Redirecting to login..."
                    );
                    setTimeout(() => {
                      window.location.href = "/login";
                    }, 2000);
                  } else {
                    throw new Error(result.error || "Failed to upload data");
                  }
                } catch (error) {
                  console.error("Error uploading data:", error);
                  showError(`Error uploading data: ${error.message}`);
                } finally {
                  hideLoading();
                }
              }

              function showUploadSuccess(result) {
                const statusElement = document.getElementById("uploadStatus");
                const statusText = document.getElementById("uploadStatusText");

                statusElement.innerHTML = `
                  <div class="alert alert-success">
                    <div class="d-flex justify-content-between align-items-center">
                      <div>
                        <i class="bi bi-check-circle"></i>
                        <span>Data uploaded successfully! Processed ${result.processed.campaigns} campaign records and ${result.processed.businessMetrics} business records.</span>
                      </div>
                      <div class="btn-group">
                        <button class="btn btn-outline-success btn-sm" onclick="showUploadMoreData()">
                          <i class="bi bi-plus-circle"></i> Upload More Data
                        </button>
                        <button class="btn btn-outline-danger btn-sm" onclick="clearAllData()" title="Clear all data for testing">
                          <i class="bi bi-trash"></i> Clear Data
                        </button>
                      </div>
                    </div>
                  </div>
                `;
                statusElement.style.display = "block";
              }

              function showUploadMoreData() {
                console.log("üîÑ Upload More Data clicked");

                // Clear previous success message
                const statusElement = document.getElementById("uploadStatus");
                if (statusElement) {
                  statusElement.style.display = "none";
                  statusElement.innerHTML = ""; // Clear the content
                }

                // Reset the form completely
                const form = document.getElementById("customDataUploadForm");
                if (form) {
                  form.reset();
                  console.log("‚úÖ Form reset");
                }

                // Clear file inputs specifically
                const campaignInput = document.getElementById("campaignDataFile");
                const businessInput = document.getElementById("businessDataFile");
                if (campaignInput) {
                  campaignInput.value = "";
                  console.log("‚úÖ Campaign input cleared");
                }
                if (businessInput) {
                  businessInput.value = "";
                  console.log("‚úÖ Business input cleared");
                }

                // Clear any existing preview modals
                const existingPreview = document.getElementById('previewModal');
                if (existingPreview) {
                  existingPreview.remove();
                }

                // Show upload modal again
                const uploadModal = new bootstrap.Modal(
                  document.getElementById("customDataUploadModal")
                );
                uploadModal.show();
                console.log("‚úÖ Upload modal shown");
              }

              async function previewUploadedData() {
                const campaignFiles = document.getElementById("campaignDataFile").files;
                const businessFile = document.getElementById("businessDataFile").files[0];

                if (campaignFiles.length === 0 && !businessFile) {
                  alert("Please select files to preview first.");
                  return;
                }

                // Create preview modal content
                let previewContent = `
                  <div class="modal fade" id="previewModal" tabindex="-1">
                    <div class="modal-dialog">
                      <div class="modal-content">
                        <div class="modal-header">
                          <h5 class="modal-title">üìä Data Preview</h5>
                          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                `;

                // Preview campaign files
                if (campaignFiles.length > 0) {
                  previewContent += "<h6>Campaign Files:</h6><ul>";
                  for (let file of campaignFiles) {
                    previewContent += `<li><strong>${file.name}</strong> (${(file.size/1024).toFixed(1)} KB)</li>`;
                  }
                  previewContent += "</ul>";
                }

                // Preview business file
                if (businessFile) {
                  previewContent += `<h6>Business File:</h6><ul><li><strong>${businessFile.name}</strong> (${(businessFile.size/1024).toFixed(1)} KB)</li></ul>`;
                }

                previewContent += `
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                          <button type="button" class="btn btn-outline-info" onclick="showDebugInfo()">üîç Debug Database</button>
                          <button type="button" class="btn btn-primary" onclick="proceedWithUpload()">Upload Data</button>
                        </div>
                      </div>
                    </div>
                  </div>
                `;

                // Remove existing preview modal if any
                const existingModal = document.getElementById('previewModal');
                if (existingModal) {
                  existingModal.remove();
                }

                // Add preview modal to body
                document.body.insertAdjacentHTML('beforeend', previewContent);

                // Show the modal
                const previewModal = new bootstrap.Modal(document.getElementById('previewModal'));
                previewModal.show();
              }

              function proceedWithUpload() {
                // Close preview modal
                const previewModal = bootstrap.Modal.getInstance(document.getElementById('previewModal'));
                if (previewModal) {
                  previewModal.hide();
                }

                // Close upload modal
                const uploadModal = bootstrap.Modal.getInstance(document.getElementById('customDataUploadModal'));
                if (uploadModal) {
                  uploadModal.hide();
                }

                // Start upload
                uploadCustomData();
              }

              async function showDebugInfoOnLoad() {
                try {
                  const response = await fetch("/api/marketing/debug-data");
                  const debug = await response.json();

                  console.log("üîç Database Debug Info:", debug);

                  // If there's existing data, automatically show it and calculate metrics
                  if (debug.totalCampaigns > 0) {
                    const platforms = debug.campaignsByPlatform.map(p => p._id).join(", ");
                    console.log(`‚úÖ Found existing data: ${debug.totalCampaigns} campaigns from platforms: ${platforms}`);

                    // Show success notification
                    const notification = document.createElement('div');
                    notification.className = 'alert alert-success alert-dismissible fade show position-fixed';
                    notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; max-width: 400px;';
                    notification.innerHTML = `
                      <strong>‚úÖ Data Loaded Successfully!</strong><br>
                      Found ${debug.totalCampaigns} campaigns from: ${platforms}<br>
                      <small class="text-muted">Automatically generating insights...</small>
                      <div class="mt-2">
                        <button class="btn btn-sm btn-danger me-2" onclick="clearAllDataFromNotification()">
                          üóëÔ∏è Clear All Data
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" onclick="showDebugInfo()">
                          üîç View Details
                        </button>
                      </div>
                      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    `;
                    document.body.appendChild(notification);

                    // Auto-hide after 8 seconds
                    setTimeout(() => {
                      if (notification.parentNode) {
                        notification.remove();
                      }
                    }, 8000);

                    // Automatically show the data and generate insights
                    await loadExistingDataAndGenerateInsights();
                  }
                } catch (error) {
                  console.error("Error getting debug info:", error);
                }
              }

              // New function to load existing data and generate insights
              async function loadExistingDataAndGenerateInsights() {
                try {
                  // Show the uploaded data section with existing data
                  await showExistingDataSection();

                  // Show the metric selection section (Step 2)
                  showMetricSelectionForExistingData();

                  // Show success message
                  showSuccessMessage("Existing data loaded! You can now select metrics and generate insights.");

                } catch (error) {
                  console.error("Error loading existing data:", error);
                  showErrorMessage(`Error loading existing data: ${error.message}. Please try refreshing the page.`);

                  // Still show the data section even if insights fail
                  try {
                    await showExistingDataSection();
                  } catch (sectionError) {
                    console.error("Error showing data section:", sectionError);
                  }
                }
              }

              // Function to show metric selection for existing data
              function showMetricSelectionForExistingData() {
                const metricSelectionSection = document.getElementById("metricSelectionSection");
                if (metricSelectionSection) {
                  metricSelectionSection.style.display = "block";

                  // Enable the generate insights button
                  const generateBtn = document.getElementById("generateSelectedInsights");
                  if (generateBtn) {
                    generateBtn.disabled = false;
                  }

                  // Scroll to the metric selection section
                  metricSelectionSection.scrollIntoView({ behavior: "smooth" });

                  // Add a note that data is already loaded
                  const existingDataNote = document.createElement('div');
                  existingDataNote.className = 'alert alert-success mb-3';
                  existingDataNote.innerHTML = `
                    <h6><i class="bi bi-check-circle me-2"></i>Data Ready for Analysis</h6>
                    <p class="mb-0">Your marketing data is loaded and ready. Select the metrics you want to analyze below.</p>
                  `;
                  metricSelectionSection.insertBefore(existingDataNote, metricSelectionSection.firstChild);
                }
              }

              // Function to show existing data section
              async function showExistingDataSection() {
                try {
                  // Get debug info to show data summary
                  const response = await fetch("/api/marketing/debug-data");
                  const debug = await response.json();

                  const dataSection = document.getElementById("dataUploadSection");
                  const existingDataDiv = document.createElement('div');
                  existingDataDiv.className = 'alert alert-info mt-3';

                  const platforms = debug.campaignsByPlatform.map(p => `${p._id} (${p.count})`).join(", ");

                  existingDataDiv.innerHTML = `
                    <h6><i class="bi bi-check-circle me-2"></i>Existing Data Found</h6>
                    <div class="row">
                      <div class="col-md-8">
                        <p class="mb-2">Your marketing data is already loaded and ready for analysis.</p>
                        <div class="small text-muted">
                          <strong>üìä Data Summary:</strong><br>
                          ‚Ä¢ Total Campaigns: ${debug.totalCampaigns}<br>
                          ‚Ä¢ Platforms: ${platforms}<br>
                          ‚Ä¢ Business Metrics: ${debug.totalBusinessMetrics} records
                        </div>
                        <div class="mt-3">
                          <h6 class="mb-2">üìÅ Uploaded Files:</h6>
                          <div class="row g-2">
                            ${debug.campaignsByPlatform.map(platform => `
                              <div class="col-md-6">
                                <div class="card border-success">
                                  <div class="card-body p-2">
                                    <div class="d-flex align-items-center">
                                      <i class="bi bi-file-earmark-spreadsheet text-success me-2"></i>
                                      <div>
                                        <small class="fw-bold">${platform._id} Campaign Data</small><br>
                                        <small class="text-muted">${platform.count} records</small>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            `).join('')}
                            ${debug.totalBusinessMetrics > 0 ? `
                              <div class="col-md-6">
                                <div class="card border-info">
                                  <div class="card-body p-2">
                                    <div class="d-flex align-items-center">
                                      <i class="bi bi-graph-up text-info me-2"></i>
                                      <div>
                                        <small class="fw-bold">Business Metrics</small><br>
                                        <small class="text-muted">${debug.totalBusinessMetrics} records</small>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            ` : ''}
                          </div>
                        </div>
                      </div>
                      <div class="col-md-4 text-end">
                        <div class="d-flex flex-column gap-2">
                          <button class="btn btn-sm btn-outline-primary" onclick="showDebugInfo()">
                            <i class="bi bi-eye me-1"></i>View Details
                          </button>
                          <button class="btn btn-sm btn-success" onclick="generateInsightsFromExistingData()">
                            <i class="bi bi-graph-up me-1"></i>Select Metrics & Analyze
                          </button>
                          <button class="btn btn-sm btn-outline-danger" onclick="clearAllData()">
                            <i class="bi bi-trash me-1"></i>Clear All Data
                          </button>
                        </div>
                      </div>
                    </div>
                  `;
                  dataSection.appendChild(existingDataDiv);
                } catch (error) {
                  console.error("Error showing existing data section:", error);
                }
              }

              // Function to generate all available charts
              async function generateAllAvailableCharts(analytics, insights) {
                const insightsContainer = document.getElementById("dynamicInsightsContainer");
                insightsContainer.innerHTML = '<div class="text-center"><div class="spinner-border" role="status"></div><p class="mt-2">Generating insights...</p></div>';

                try {
                  // Check if we have valid analytics data
                  if (!analytics || !analytics.byPlatform || Object.keys(analytics.byPlatform).length === 0) {
                    insightsContainer.innerHTML = `
                      <div class="alert alert-warning">
                        <h6><i class="bi bi-exclamation-triangle me-2"></i>No Analytics Data Available</h6>
                        <p class="mb-0">The data exists but analytics could not be calculated. This might be due to missing required fields in your data.</p>
                        <div class="mt-3">
                          <button class="btn btn-sm btn-outline-primary" onclick="showDebugInfo()">
                            <i class="bi bi-eye me-1"></i>View Data Details
                          </button>
                          <button class="btn btn-sm btn-outline-danger" onclick="clearAllData()">
                            <i class="bi bi-trash me-1"></i>Clear All Data
                          </button>
                        </div>
                      </div>
                    `;
                    return;
                  }

                  // Generate ROI Analysis
                  if (analytics.byPlatform && Object.keys(analytics.byPlatform).length > 0) {
                    generateMetricChart('ROI Analysis', 'roi', analytics, insights);
                  }

                  // Generate ROAS Analysis
                  if (analytics.byPlatform && Object.keys(analytics.byPlatform).length > 0) {
                    generateMetricChart('ROAS Analysis', 'roas', analytics, insights);
                  }

                  // Generate Platform Performance
                  if (analytics.byPlatform && Object.keys(analytics.byPlatform).length > 0) {
                    generateMetricChart('Platform Performance', 'platform', analytics, insights);
                  }

                  // Generate CTR Analysis
                  if (analytics.byPlatform && Object.keys(analytics.byPlatform).length > 0) {
                    generateMetricChart('CTR Analysis', 'ctr', analytics, insights);
                  }

                  // Generate CPC Analysis
                  if (analytics.byPlatform && Object.keys(analytics.byPlatform).length > 0) {
                    generateMetricChart('CPC Analysis', 'cpc', analytics, insights);
                  }

                  // Generate Conversion Analysis
                  if (analytics.byPlatform && Object.keys(analytics.byPlatform).length > 0) {
                    generateMetricChart('Conversion Analysis', 'conversion', analytics, insights);
                  }

                } catch (error) {
                  console.error("Error generating charts:", error);
                  insightsContainer.innerHTML = `
                    <div class="alert alert-danger">
                      <h6><i class="bi bi-exclamation-triangle me-2"></i>Error Generating Insights</h6>
                      <p class="mb-0">There was an error generating the insights. Please try refreshing the page or contact support.</p>
                      <div class="mt-3">
                        <button class="btn btn-sm btn-outline-primary" onclick="location.reload()">
                          <i class="bi bi-arrow-clockwise me-1"></i>Refresh Page
                        </button>
                      </div>
                    </div>
                  `;
                }
              }

              // Function to manually generate insights from existing data
              async function generateInsightsFromExistingData() {
                try {
                  showSuccessMessage("Opening metric selection for existing data...");

                  // Show the metric selection section
                  showMetricSelectionForExistingData();

                } catch (error) {
                  console.error("Error opening metric selection:", error);
                  showErrorMessage(`Error opening metric selection: ${error.message}`);
                }
              }

              // Helper functions for messages
              function showSuccessMessage(message) {
                const alertDiv = document.createElement('div');
                alertDiv.className = 'alert alert-success alert-dismissible fade show position-fixed';
                alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; max-width: 400px;';
                alertDiv.innerHTML = `
                  <strong>‚úÖ Success!</strong><br>
                  ${message}
                  <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;
                document.body.appendChild(alertDiv);

                setTimeout(() => {
                  if (alertDiv.parentNode) {
                    alertDiv.remove();
                  }
                }, 5000);
              }

              function showErrorMessage(message) {
                const alertDiv = document.createElement('div');
                alertDiv.className = 'alert alert-danger alert-dismissible fade show position-fixed';
                alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; max-width: 400px;';
                alertDiv.innerHTML = `
                  <strong>‚ùå Error!</strong><br>
                  ${message}
                  <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;
                document.body.appendChild(alertDiv);

                setTimeout(() => {
                  if (alertDiv.parentNode) {
                    alertDiv.remove();
                  }
                }, 5000);
              }

              function showMetricSelection() {
                document.getElementById("metricSelectionSection").style.display =
                  "block";
                document
                  .getElementById("metricSelectionSection")
                  .scrollIntoView({ behavior: "smooth" });
              }

              async function generateSelectedInsights() {
                if (selectedMetrics.size === 0) return;

                try {
                  showLoading();

                  // Load marketing data first
                  await loadMarketingData();

                  // Generate insights for selected metrics
                  const container = document.getElementById(
                    "dynamicInsightsContainer"
                  );
                  container.innerHTML = "";
                  container.style.display = "block";

                  for (const metric of selectedMetrics) {
                    await generateMetricInsight(metric, container);
                  }

                  container.scrollIntoView({ behavior: "smooth" });
                } catch (error) {
                  showError("Error generating insights: " + error.message);
                } finally {
                  hideLoading();
                }
              }

              async function loadMarketingData() {
                const response = await fetch("/api/marketing/analytics");
                if (!response.ok) {
                  throw new Error("Failed to load marketing data");
                }
                marketingData = await response.json();
              }

              async function generateMetricInsight(metric, container) {
                const card = document.createElement("div");
                card.className = "card mb-4";

                const metricConfig = getMetricConfig(metric);

                card.innerHTML = `
                  <div class="card-header">
                    <h5 class="card-title">${metricConfig.icon} ${metricConfig.title}</h5>
                  </div>
                  <div class="card-body">
                    <div class="row">
                      <div class="col-md-8">
                        <canvas id="${metric}Chart" width="600" height="300"></canvas>
                      </div>
                      <div class="col-md-4">
                        <div class="metric-summary">
                          <div class="metric-value-large" id="${metric}Value">-</div>
                          <div class="metric-description">${metricConfig.description}</div>
                          <div class="metric-insights mt-3" id="${metric}Insights">
                            <div class="spinner-border spinner-border-sm" role="status">
                              <span class="visually-hidden">Loading insights...</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                `;

                container.appendChild(card);

                // Generate chart and insights
                setTimeout(() => {
                  generateMetricChart(metric, marketingData);
                  generateMetricValue(metric, marketingData);
                  generateAIInsights(metric);
                }, 100);
              }

              function getMetricConfig(metric) {
                const configs = {
                  roi: {
                    icon: "üí∞",
                    title: "Return on Investment (ROI)",
                    description: "Profitability of marketing investment",
                  },
                  roas: {
                    icon: "üìä",
                    title: "Return on Ad Spend (ROAS)",
                    description: "Revenue generated per dollar spent",
                  },
                  cogs: {
                    icon: "üì¶",
                    title: "Cost of Goods Sold (COGS)",
                    description: "Direct costs of producing goods",
                  },
                  cac: {
                    icon: "üë•",
                    title: "Customer Acquisition Cost (CAC)",
                    description: "Cost to acquire one customer",
                  },
                  ctr: {
                    icon: "üéØ",
                    title: "Click-Through Rate (CTR)",
                    description: "Percentage of ad clicks",
                  },
                  cpc: {
                    icon: "üí∏",
                    title: "Cost Per Click (CPC)",
                    description: "Average cost per ad click",
                  },
                  conversion: {
                    icon: "üîÑ",
                    title: "Conversion Rate",
                    description: "Percentage of clicks that convert",
                  },
                  "platform-performance": {
                    icon: "üì±",
                    title: "Platform Performance",
                    description: "Performance across platforms",
                  },
                };
                return (
                  configs[metric] || {
                    icon: "üìä",
                    title: metric,
                    description: "Marketing metric analysis",
                  }
                );
              }

              function generateDynamicColors(count) {
                const colors = [
                  "#3b82f6", // Blue
                  "#ef4444", // Red
                  "#10b981", // Green
                  "#f59e0b", // Yellow
                  "#8b5cf6", // Purple
                  "#06b6d4", // Cyan
                  "#f97316", // Orange
                  "#84cc16", // Lime
                ];
                return colors.slice(0, count);
              }

              function generateMetricChart(metric, data) {
                const ctx = document.getElementById(metric + "Chart");
                if (!ctx) return;

                const chartData = prepareChartData(metric, data);

                new Chart(ctx, {
                  type: chartData.type,
                  data: chartData.data,
                  options: {
                    responsive: true,
                    plugins: {
                      legend: {
                        position: "top",
                      },
                      title: {
                        display: true,
                        text: chartData.title,
                      },
                    },
                    scales: chartData.scales || {},
                  },
                });
              }

              function prepareChartData(metric, data) {
                switch (metric) {
                  case "roi":
                    return {
                      type: "bar",
                      title: "ROI by Platform",
                      data: {
                        labels: Object.keys(data.byPlatform),
                        datasets: [
                          {
                            label: "ROI (%)",
                            data: Object.values(data.byPlatform).map((p) => p.roi),
                            backgroundColor: "rgba(34, 197, 94, 0.8)",
                          },
                        ],
                      },
                      scales: {
                        y: { beginAtZero: true },
                      },
                    };
                  case "roas":
                    return {
                      type: "doughnut",
                      title: "ROAS by Platform",
                      data: {
                        labels: Object.keys(data.byPlatform),
                        datasets: [
                          {
                            data: Object.values(data.byPlatform).map((p) => p.roas),
                            backgroundColor: generateDynamicColors(Object.keys(data.byPlatform).length),
                          },
                        ],
                      },
                    };
                  case "ctr":
                    return {
                      type: "bar",
                      title: "CTR by Platform",
                      data: {
                        labels: Object.keys(data.byPlatform),
                        datasets: [
                          {
                            label: "CTR (%)",
                            data: Object.values(data.byPlatform).map((p) => p.ctr),
                            backgroundColor: generateDynamicColors(Object.keys(data.byPlatform).length),
                          },
                        ],
                      },
                      scales: {
                        y: { beginAtZero: true },
                      },
                    };
                  default:
                    return {
                      type: "bar",
                      title: "Platform Comparison",
                      data: {
                        labels: Object.keys(data.byPlatform),
                        datasets: [
                          {
                            label: "Value",
                            data: Object.values(data.byPlatform).map((p) => p.spend),
                            backgroundColor: "rgba(59, 130, 246, 0.8)",
                          },
                        ],
                      },
                    };
                }
              }

              function generateMetricValue(metric, data) {
                const element = document.getElementById(metric + "Value");
                if (!element) return;

                let value = "-";
                switch (metric) {
                  case "roi":
                    value = data.summary.roi.toFixed(1) + "%";
                    break;
                  case "roas":
                    value = data.summary.roas.toFixed(2) + "x";
                    break;
                  case "cac":
                    value = "$" + data.summary.cac.toFixed(2);
                    break;
                  case "ctr":
                    value = data.summary.ctr.toFixed(2) + "%";
                    break;
                }
                element.textContent = value;
              }

              async function generateAIInsights(metric) {
                const insightsElement = document.getElementById(metric + "Insights");
                if (!insightsElement) return;

                try {
                  const response = await fetch("/api/marketing/insights", {
                    method: "GET",
                    headers: {
                      "Accept": "application/json",
                      "Content-Type": "application/json"
                    },
                    credentials: 'include' // Include cookies for authentication
                  });

                  // Check if response is JSON
                  const contentType = response.headers.get("content-type");
                  if (!contentType || !contentType.includes("application/json")) {
                    console.error("Response is not JSON:", contentType);
                    throw new Error("Server returned non-JSON response");
                  }

                  const result = await response.json();

                  if (response.ok && result.insights && result.insights.length > 0) {
                    // Get the first insight for this metric
                    const relevantInsight = result.insights.find(insight =>
                      insight.toLowerCase().includes(metric.toLowerCase())
                    ) || result.insights[0];

                    insightsElement.innerHTML = `
                      <div class="alert alert-info">
                        <strong>AI Insight:</strong> ${relevantInsight}
                      </div>
                    `;
                  } else {
                    insightsElement.innerHTML = `
                      <div class="text-muted">
                        <small>AI insights temporarily unavailable</small>
                      </div>
                    `;
                  }
                } catch (error) {
                  console.error("Error generating insights:", error);
                  insightsElement.innerHTML = `
                    <div class="text-muted">
                      <small>Unable to generate insights</small>
                    </div>
                  `;
                }
              }

              function downloadTemplate(type) {
                let csvContent, filename;

                if (type === "campaign") {
                  csvContent = `campaign_name,platform,date,spend,impressions,clicks,attributed_revenue
      Summer Sale,Facebook,2024-01-01,1000,50000,2500,5000
      Holiday Campaign,Google,2024-01-02,1500,75000,3000,7500
      Brand Awareness,TikTok,2024-01-03,800,40000,1600,3200`;
                  filename = "campaign_data_template.csv";
                } else {
                  csvContent = `date,total_revenue,total_orders,new_customers,cogs
      2024-01-01,15000,150,45,9000
      2024-01-02,18000,180,52,10800
      2024-01-03,12000,120,38,7200`;
                  filename = "business_data_template.csv";
                }

                const blob = new Blob([csvContent], { type: "text/csv" });
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement("a");
                a.style.display = "none";
                a.href = url;
                a.download = filename;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
              }

              // Utility functions
              function showLoading() {
                const loadingOverlay = document.createElement('div');
                loadingOverlay.id = 'uploadLoadingOverlay';
                loadingOverlay.innerHTML = `
                  <div class="loading-backdrop">
                    <div class="loading-content">
                      <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                        <span class="visually-hidden">Loading...</span>
                      </div>
                      <h5 class="mt-3" id="loadingTitle">Processing Your Data...</h5>
                      <p class="text-muted" id="loadingMessage">Please wait while we upload and process your marketing data.</p>
                      <div class="progress mt-3" style="width: 300px;">
                        <div class="progress-bar progress-bar-striped progress-bar-animated"
                             role="progressbar" style="width: 0%" id="loadingProgressBar"></div>
                      </div>
                      <div class="mt-2">
                        <small class="text-muted" id="loadingDetails">Initializing upload...</small>
                      </div>
                    </div>
                  </div>
                `;

                // Add loading styles
                const style = document.createElement('style');
                style.textContent = `
                  .loading-backdrop {
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background-color: rgba(0, 0, 0, 0.7);
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    z-index: 9999;
                  }
                  .loading-content {
                    background: white;
                    padding: 2rem;
                    border-radius: 12px;
                    text-align: center;
                    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
                  }
                `;
                document.head.appendChild(style);
                document.body.appendChild(loadingOverlay);
              }

              function startProgressPolling() {
                return setInterval(async () => {
                  try {
                    const response = await fetch("/api/marketing/upload-progress");
                    if (response.ok) {
                      const progress = await response.json();
                      updateLoadingProgress(progress.progress, progress.message, progress.details);
                    }
                  } catch (error) {
                    console.error("Error polling progress:", error);
                  }
                }, 500); // Poll every 500ms
              }

              function updateLoadingProgress(progress, message, details) {
                const progressBar = document.getElementById('loadingProgressBar');
                const loadingMessage = document.getElementById('loadingMessage');
                const loadingDetails = document.getElementById('loadingDetails');

                if (progressBar) {
                  progressBar.style.width = progress + '%';
                  progressBar.setAttribute('aria-valuenow', progress);
                }

                if (loadingMessage && message) {
                  loadingMessage.textContent = message;
                }

                if (loadingDetails && details) {
                  loadingDetails.textContent = details;
                }
              }

              function hideLoading() {
                const loadingOverlay = document.getElementById('uploadLoadingOverlay');
                if (loadingOverlay) {
                  loadingOverlay.remove();
                }
              }

              function showError(message) {
                alert("Error: " + message);
              }

              // Make functions globally available
              window.uploadCustomData = uploadCustomData;
              window.downloadTemplate = downloadTemplate;
            });
    </script>
  </body>
</html>
