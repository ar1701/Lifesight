<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= title %></title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <link href="/css/modern.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  </head>
  <body>
    <div class="app-container">
      <%- include('partials/navbar', { currentPage: 'marketing' }) -%>

      <div class="main-layout">
        <%- include('partials/sidebar') -%>

        <main class="main-content">
          <!-- Page Header -->
          <div class="mb-8">
            <h1 class="mb-2">Marketing Intelligence Dashboard</h1>
            <p class="text-gray-600">
              Comprehensive analysis of marketing performance and business
              outcomes
            </p>
          </div>

          <!-- Action Buttons -->
          <div class="flex gap-4 mb-6">
            <button class="btn btn-primary" id="importDataBtn">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M14 2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.89 22 5.99 22H18C19.1 22 20 21.1 20 20V8L14 2ZM18 20H6V4H13V9H18V20Z"
                  fill="currentColor"
                />
              </svg>
              Import Data
            </button>
            <button class="btn btn-outline" id="refreshDataBtn">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M17.65 6.35C16.2 4.9 14.21 4 12 4C7.58 4 4 7.58 4 12C4 16.42 7.58 20 12 20C15.73 20 18.84 17.45 19.73 14H17.65C16.83 16.33 14.61 18 12 18C8.69 18 6 15.31 6 12C6 8.69 8.69 6 12 6C13.66 6 15.14 6.69 16.22 7.78L13 11H20V4L17.65 6.35Z"
                  fill="currentColor"
                />
              </svg>
              Refresh
            </button>
            <button class="btn btn-outline" id="exportDataBtn">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M14 2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.89 22 5.99 22H18C19.1 22 20 21.1 20 20V8L14 2ZM18 20H6V4H13V9H18V20ZM8 15.01L9.41 16.42L11 14.84V20H13V14.84L14.59 16.43L16 15.01L12.01 11L8 15.01Z"
                  fill="currentColor"
                />
              </svg>
              Export Report
            </button>
          </div>

          <!-- Loading State -->
          <div id="loadingState" class="loading" style="display: none">
            <div class="spinner"></div>
            <span>Loading marketing data...</span>
          </div>

          <!-- Data Import State -->
          <div id="importState" class="empty-state">
            <div class="empty-state-icon">
              <svg
                width="64"
                height="64"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M12 2C6.48 2 2 6.48 2 12S6.48 22 12 22 22 17.52 22 12 17.52 2 12 2ZM13 17H11V15H13V17ZM13 13H11V7H13V13Z"
                  fill="currentColor"
                />
              </svg>
            </div>
            <h3>No Marketing Data</h3>
            <p>Import your marketing data to start analyzing performance.</p>
            <button class="btn btn-primary" id="importDataBtnMain">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M14 2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.89 22 5.99 22H18C19.1 22 20 21.1 20 20V8L14 2ZM18 20H6V4H13V9H18V20Z"
                  fill="currentColor"
                />
              </svg>
              Import Marketing Data
            </button>
          </div>

          <!-- Dashboard Content -->
          <div id="dashboardContent" style="display: none">
            <!-- Filters Section -->
            <div class="filters-container mb-6">
              <h4 class="mb-4">Filters & Controls</h4>
              <div class="filters-grid">
                <div class="form-group">
                  <label class="form-label">Date Range</label>
                  <div class="flex gap-2">
                    <input type="date" class="form-control" id="startDate" />
                    <input type="date" class="form-control" id="endDate" />
                  </div>
                </div>
                <div class="form-group">
                  <label class="form-label">Platform</label>
                  <select class="form-control" id="platformFilter">
                    <option value="">All Platforms</option>
                    <option value="Facebook">Facebook</option>
                    <option value="Google">Google</option>
                    <option value="TikTok">TikTok</option>
                  </select>
                </div>
                <div class="form-group">
                  <label class="form-label">Tactic</label>
                  <select class="form-control" id="tacticFilter">
                    <option value="">All Tactics</option>
                  </select>
                </div>
                <div class="form-group">
                  <label class="form-label">State</label>
                  <select class="form-control" id="stateFilter">
                    <option value="">All States</option>
                  </select>
                </div>
              </div>
              <div class="flex gap-3 mt-4">
                <button class="btn btn-primary" id="applyFiltersBtn">
                  Apply Filters
                </button>
                <button class="btn btn-secondary" id="clearFiltersBtn">
                  Clear Filters
                </button>
                <button class="btn btn-outline" id="aiInsightsBtn">
                  <svg
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M12 2L13.09 8.26L22 9L13.09 9.74L12 16L10.91 9.74L2 9L10.91 8.26L12 2Z"
                      fill="currentColor"
                    />
                  </svg>
                  AI Insights
                </button>
              </div>
            </div>

            <!-- Key Metrics Cards -->
            <div class="metrics-grid mb-8">
              <div class="metric-card">
                <div class="metric-icon primary">
                  <svg
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M12 2C6.48 2 2 6.48 2 12S6.48 22 12 22 22 17.52 22 12 17.52 2 12 2ZM13 17H11V15H13V17ZM13 13H11V7H13V13Z"
                      fill="currentColor"
                    />
                  </svg>
                </div>
                <div class="metric-value" id="totalROAS">-</div>
                <div class="metric-label">Total ROAS</div>
              </div>
              <div class="metric-card">
                <div class="metric-icon success">
                  <svg
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M16 6L18.29 8.29L13.41 13.17L9.41 9.17L2 16.59L3.41 18L9.41 12L13.41 16L19.71 9.71L22 12V6H16Z"
                      fill="currentColor"
                    />
                  </svg>
                </div>
                <div class="metric-value" id="totalROI">-</div>
                <div class="metric-label">Total ROI</div>
              </div>
              <div class="metric-card">
                <div class="metric-icon warning">
                  <svg
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M12 2L13.09 8.26L22 9L13.09 9.74L12 16L10.91 9.74L2 9L10.91 8.26L12 2Z"
                      fill="currentColor"
                    />
                  </svg>
                </div>
                <div class="metric-value" id="totalCAC">-</div>
                <div class="metric-label">CAC</div>
              </div>
              <div class="metric-card">
                <div class="metric-icon info">
                  <svg
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M12 2C6.48 2 2 6.48 2 12S6.48 22 12 22 22 17.52 22 12 17.52 2 12 2ZM13 17H11V15H13V17ZM13 13H11V7H13V13Z"
                      fill="currentColor"
                    />
                  </svg>
                </div>
                <div class="metric-value" id="avgCTR">-</div>
                <div class="metric-label">Avg CTR</div>
              </div>
            </div>

            <!-- Charts Row -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
              <!-- Platform Performance -->
              <div class="card">
                <div class="card-header">
                  <h5 class="card-title">Platform Performance</h5>
                </div>
                <div class="card-body">
                  <canvas id="platformChart" width="400" height="300"></canvas>
                </div>
              </div>

              <!-- ROAS by Platform -->
              <div class="card">
                <div class="card-header">
                  <h5 class="card-title">ROAS by Platform</h5>
                </div>
                <div class="card-body">
                  <canvas id="roasChart" width="400" height="300"></canvas>
                </div>
              </div>
            </div>

            <!-- Time Series and Tactics -->
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
              <!-- Time Series -->
              <div class="card lg:col-span-2">
                <div class="card-header">
                  <h5 class="card-title">Performance Over Time</h5>
                </div>
                <div class="card-body">
                  <canvas
                    id="timeSeriesChart"
                    width="600"
                    height="300"
                  ></canvas>
                </div>
              </div>

              <!-- Tactic Performance -->
              <div class="card">
                <div class="card-header">
                  <h5 class="card-title">Tactic Performance</h5>
                </div>
                <div class="card-body">
                  <canvas id="tacticChart" width="300" height="300"></canvas>
                </div>
              </div>
            </div>

            <!-- Data Preview and Chat -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
              <!-- Data Preview -->
              <div class="card">
                <div class="card-header">
                  <h5 class="card-title">Data Preview</h5>
                </div>
                <div class="card-body">
                  <div class="table-container">
                    <table class="table" id="dataPreviewTable">
                      <thead>
                        <tr>
                          <th>Date</th>
                          <th>Platform</th>
                          <th>Spend</th>
                          <th>Revenue</th>
                          <th>ROAS</th>
                        </tr>
                      </thead>
                      <tbody id="dataPreviewBody"></tbody>
                    </table>
                  </div>
                  <div class="flex justify-between items-center mt-4">
                    <button class="btn btn-outline btn-sm" id="loadMoreDataBtn">
                      Load More
                    </button>
                    <span class="text-sm text-gray-500" id="dataCount"
                      >Showing 0 records</span
                    >
                  </div>
                </div>
              </div>

              <!-- AI Chat -->
              <div class="card">
                <div class="card-header">
                  <h5 class="card-title">AI Marketing Assistant</h5>
                </div>
                <div class="card-body">
                  <div class="chat-container" style="height: 400px">
                    <div class="chat-messages" id="marketingChatMessages">
                      <div class="message assistant">
                        <div class="message-avatar">AI</div>
                        <div class="message-content">
                          Hi! I'm your marketing AI assistant. Ask me anything
                          about your marketing performance, trends, or
                          optimization strategies.
                        </div>
                      </div>
                    </div>
                    <div class="chat-input">
                      <input
                        type="text"
                        id="marketingChatInput"
                        placeholder="Ask about marketing performance..."
                      />
                      <button class="btn btn-primary" id="marketingSendBtn">
                        <svg
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M2.01 21L23 12L2.01 3L2 10L17 12L2 14L2.01 21Z"
                            fill="currentColor"
                          />
                        </svg>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Insights Section -->
            <div class="card mb-8">
              <div class="card-header">
                <h5 class="card-title">AI-Powered Insights</h5>
              </div>
              <div class="card-body">
                <div id="insightsContainer">
                  <div class="loading">
                    <div class="spinner"></div>
                    <span>Generating insights...</span>
                  </div>
                </div>
              </div>
            </div>

            <!-- Detailed Tables -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <!-- Platform Summary -->
              <div class="card">
                <div class="card-header">
                  <h5 class="card-title">Platform Summary</h5>
                </div>
                <div class="card-body">
                  <div class="table-container">
                    <table class="table">
                      <thead>
                        <tr>
                          <th>Platform</th>
                          <th>Spend</th>
                          <th>Revenue</th>
                          <th>ROAS</th>
                          <th>ROI</th>
                        </tr>
                      </thead>
                      <tbody id="platformTableBody"></tbody>
                    </table>
                  </div>
                </div>
              </div>

              <!-- Business Metrics -->
              <div class="card">
                <div class="card-header">
                  <h5 class="card-title">Business Metrics</h5>
                </div>
                <div class="card-body">
                  <div class="table-container">
                    <table class="table">
                      <thead>
                        <tr>
                          <th>Metric</th>
                          <th>Value</th>
                          <th>Unit</th>
                        </tr>
                      </thead>
                      <tbody id="businessTableBody"></tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </main>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        let marketingData = null;
        let charts = {};
        let currentFilters = {};

        // Initialize dashboard
        initializeDashboard();

        // Event listeners
        document
          .getElementById("importDataBtn")
          .addEventListener("click", importMarketingData);
        document
          .getElementById("importDataBtnMain")
          .addEventListener("click", importMarketingData);
        document
          .getElementById("refreshDataBtn")
          .addEventListener("click", loadMarketingData);
        document
          .getElementById("exportDataBtn")
          .addEventListener("click", exportData);
        document
          .getElementById("applyFiltersBtn")
          .addEventListener("click", applyFilters);
        document
          .getElementById("clearFiltersBtn")
          .addEventListener("click", clearFilters);
        document
          .getElementById("aiInsightsBtn")
          .addEventListener("click", showAIInsights);
        document
          .getElementById("loadMoreDataBtn")
          .addEventListener("click", loadMoreData);
        document
          .getElementById("marketingSendBtn")
          .addEventListener("click", sendMarketingMessage);
        document
          .getElementById("marketingChatInput")
          .addEventListener("keypress", function (e) {
            if (e.key === "Enter") sendMarketingMessage();
          });

        async function initializeDashboard() {
          await loadMarketingData();
        }

        async function importMarketingData() {
          showLoading();

          try {
            const response = await fetch("/api/marketing/import", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
            });

            const result = await response.json();

            if (response.ok) {
              showSuccess("Marketing data imported successfully!");
              await loadMarketingData();
            } else {
              throw new Error(result.error || "Failed to import data");
            }
          } catch (error) {
            console.error("Error importing data:", error);
            showError(`Error importing data: ${error.message}`);
          }
        }

        async function loadMarketingData() {
          showLoading();

          try {
            const response = await fetch("/api/marketing/analytics");
            const data = await response.json();

            if (response.ok) {
              marketingData = data;
              renderDashboard();
              loadInsights();
              updateFilters();
            } else {
              throw new Error(data.error || "Failed to load data");
            }
          } catch (error) {
            console.error("Error loading data:", error);
            showError(`Error loading data: ${error.message}`);
            showImportState();
          }
        }

        function renderDashboard() {
          if (!marketingData) {
            showImportState();
            return;
          }

          hideLoading();
          document.getElementById("dashboardContent").style.display = "block";
          document.getElementById("importState").style.display = "none";

          // Update key metrics
          updateKeyMetrics();

          // Render charts
          renderPlatformChart();
          renderROASChart();
          renderTimeSeriesChart();
          renderTacticChart();

          // Update tables
          updatePlatformTable();
          updateBusinessTable();
          updateDataPreview();
        }

        function updateKeyMetrics() {
          const summary = marketingData.summary;

          document.getElementById("totalROAS").textContent =
            summary.roas.toFixed(2) + "x";
          document.getElementById("totalROI").textContent =
            summary.roi.toFixed(1) + "%";
          document.getElementById("totalCAC").textContent =
            "$" + summary.cac.toFixed(2);
          document.getElementById("avgCTR").textContent =
            summary.ctr.toFixed(2) + "%";
        }

        function renderPlatformChart() {
          const ctx = document.getElementById("platformChart").getContext("2d");
          const platforms = Object.keys(marketingData.byPlatform);
          const spendData = platforms.map(
            (p) => marketingData.byPlatform[p].spend
          );
          const revenueData = platforms.map(
            (p) => marketingData.byPlatform[p].revenue
          );

          if (charts.platform) charts.platform.destroy();

          charts.platform = new Chart(ctx, {
            type: "bar",
            data: {
              labels: platforms,
              datasets: [
                {
                  label: "Spend",
                  data: spendData,
                  backgroundColor: "rgba(37, 99, 235, 0.8)",
                  borderColor: "rgba(37, 99, 235, 1)",
                  borderWidth: 1,
                },
                {
                  label: "Revenue",
                  data: revenueData,
                  backgroundColor: "rgba(16, 185, 129, 0.8)",
                  borderColor: "rgba(16, 185, 129, 1)",
                  borderWidth: 1,
                },
              ],
            },
            options: {
              responsive: true,
              scales: {
                y: {
                  beginAtZero: true,
                },
              },
            },
          });
        }

        function renderROASChart() {
          const ctx = document.getElementById("roasChart").getContext("2d");
          const platforms = Object.keys(marketingData.byPlatform);
          const roasData = platforms.map(
            (p) => marketingData.byPlatform[p].roas
          );

          if (charts.roas) charts.roas.destroy();

          charts.roas = new Chart(ctx, {
            type: "doughnut",
            data: {
              labels: platforms,
              datasets: [
                {
                  data: roasData,
                  backgroundColor: [
                    "rgba(37, 99, 235, 0.8)",
                    "rgba(16, 185, 129, 0.8)",
                    "rgba(245, 158, 11, 0.8)",
                  ],
                  borderColor: [
                    "rgba(37, 99, 235, 1)",
                    "rgba(16, 185, 129, 1)",
                    "rgba(245, 158, 11, 1)",
                  ],
                  borderWidth: 1,
                },
              ],
            },
            options: {
              responsive: true,
              plugins: {
                legend: {
                  position: "bottom",
                },
              },
            },
          });
        }

        function renderTimeSeriesChart() {
          const ctx = document
            .getElementById("timeSeriesChart")
            .getContext("2d");
          const timeSeries = marketingData.timeSeries;
          const dates = timeSeries.map((d) => d.date);
          const spendData = timeSeries.map((d) => d.spend);
          const revenueData = timeSeries.map((d) => d.revenue);

          if (charts.timeSeries) charts.timeSeries.destroy();

          charts.timeSeries = new Chart(ctx, {
            type: "line",
            data: {
              labels: dates,
              datasets: [
                {
                  label: "Spend",
                  data: spendData,
                  borderColor: "rgba(239, 68, 68, 1)",
                  backgroundColor: "rgba(239, 68, 68, 0.2)",
                  tension: 0.1,
                },
                {
                  label: "Revenue",
                  data: revenueData,
                  borderColor: "rgba(16, 185, 129, 1)",
                  backgroundColor: "rgba(16, 185, 129, 0.2)",
                  tension: 0.1,
                },
              ],
            },
            options: {
              responsive: true,
              scales: {
                y: {
                  beginAtZero: true,
                },
              },
            },
          });
        }

        function renderTacticChart() {
          const ctx = document.getElementById("tacticChart").getContext("2d");
          const tactics = Object.keys(marketingData.byTactic);
          const roiData = tactics.map((t) => marketingData.byTactic[t].roi);

          if (charts.tactic) charts.tactic.destroy();

          charts.tactic = new Chart(ctx, {
            type: "bar",
            data: {
              labels: tactics,
              datasets: [
                {
                  label: "ROI (%)",
                  data: roiData,
                  backgroundColor: "rgba(139, 92, 246, 0.8)",
                  borderColor: "rgba(139, 92, 246, 1)",
                  borderWidth: 1,
                },
              ],
            },
            options: {
              responsive: true,
              indexAxis: "y",
              scales: {
                x: {
                  beginAtZero: true,
                },
              },
            },
          });
        }

        function updatePlatformTable() {
          const tbody = document.getElementById("platformTableBody");
          tbody.innerHTML = "";

          Object.keys(marketingData.byPlatform).forEach((platform) => {
            const data = marketingData.byPlatform[platform];
            const row = tbody.insertRow();
            row.innerHTML = `
            <td>${platform}</td>
            <td>$${data.spend.toFixed(2)}</td>
            <td>$${data.revenue.toFixed(2)}</td>
            <td>${data.roas.toFixed(2)}x</td>
            <td>${data.roi.toFixed(1)}%</td>
          `;
          });
        }

        function updateBusinessTable() {
          const tbody = document.getElementById("businessTableBody");
          const metrics = marketingData.businessMetrics;

          tbody.innerHTML = `
          <tr><td>Total Revenue</td><td>$${metrics.totalRevenue.toFixed(
            2
          )}</td><td>USD</td></tr>
          <tr><td>Total Orders</td><td>${metrics.totalOrders.toLocaleString()}</td><td>Orders</td></tr>
          <tr><td>New Customers</td><td>${metrics.totalCustomers.toLocaleString()}</td><td>Customers</td></tr>
          <tr><td>Revenue per Customer</td><td>$${metrics.revenuePerCustomer.toFixed(
            2
          )}</td><td>USD</td></tr>
          <tr><td>Average Order Value</td><td>$${metrics.orderValue.toFixed(
            2
          )}</td><td>USD</td></tr>
          <tr><td>Profit Margin</td><td>${metrics.profitMargin.toFixed(
            1
          )}%</td><td>%</td></tr>
        `;
        }

        function updateDataPreview() {
          const tbody = document.getElementById("dataPreviewBody");
          const timeSeries = marketingData.timeSeries.slice(0, 10); // Show first 10 records

          tbody.innerHTML = "";
          timeSeries.forEach((record) => {
            const row = tbody.insertRow();
            row.innerHTML = `
            <td>${record.date}</td>
            <td>All Platforms</td>
            <td>$${record.spend.toFixed(2)}</td>
            <td>$${record.revenue.toFixed(2)}</td>
            <td>${record.roas.toFixed(2)}x</td>
          `;
          });

          document.getElementById(
            "dataCount"
          ).textContent = `Showing ${timeSeries.length} of ${marketingData.timeSeries.length} records`;
        }

        function updateFilters() {
          // Update tactic filter
          const tacticFilter = document.getElementById("tacticFilter");
          const tactics = Object.keys(marketingData.byTactic);
          tactics.forEach((tactic) => {
            const option = document.createElement("option");
            option.value = tactic;
            option.textContent = tactic;
            tacticFilter.appendChild(option);
          });

          // Set default date range
          const timeSeries = marketingData.timeSeries;
          if (timeSeries.length > 0) {
            document.getElementById("startDate").value = timeSeries[0].date;
            document.getElementById("endDate").value =
              timeSeries[timeSeries.length - 1].date;
          }
        }

        function applyFilters() {
          currentFilters = {
            startDate: document.getElementById("startDate").value,
            endDate: document.getElementById("endDate").value,
            platform: document.getElementById("platformFilter").value,
            tactic: document.getElementById("tacticFilter").value,
            state: document.getElementById("stateFilter").value,
          };

          // Reload data with filters
          loadMarketingData();
        }

        function clearFilters() {
          document.getElementById("startDate").value = "";
          document.getElementById("endDate").value = "";
          document.getElementById("platformFilter").value = "";
          document.getElementById("tacticFilter").value = "";
          document.getElementById("stateFilter").value = "";

          currentFilters = {};
          loadMarketingData();
        }

        async function loadInsights() {
          try {
            const response = await fetch("/api/marketing/insights");
            const data = await response.json();

            if (response.ok) {
              renderInsights(data.insights);
            }
          } catch (error) {
            console.error("Error loading insights:", error);
          }
        }

        function renderInsights(insights) {
          const container = document.getElementById("insightsContainer");

          if (insights.length === 0) {
            container.innerHTML =
              '<p class="text-gray-500">No insights available at this time.</p>';
            return;
          }

          container.innerHTML = insights
            .map(
              (insight) => `
          <div class="alert alert-${getInsightAlertType(insight.type)}">
            <h6 class="font-semibold mb-2">${insight.title}</h6>
            <p class="mb-2">${insight.message}</p>
            <p class="mb-0"><strong>Recommendation:</strong> ${
              insight.recommendation
            }</p>
          </div>
        `
            )
            .join("");
        }

        function getInsightAlertType(type) {
          switch (type) {
            case "success":
              return "success";
            case "warning":
              return "warning";
            case "performance":
              return "info";
            default:
              return "secondary";
          }
        }

        async function sendMarketingMessage() {
          const input = document.getElementById("marketingChatInput");
          const message = input.value.trim();

          if (!message) return;

          // Add user message
          addMarketingMessage("user", message);
          input.value = "";

          // Show loading
          const loadingId = addMarketingMessage(
            "assistant",
            "Analyzing your marketing data...",
            true
          );

          try {
            const response = await fetch("/api/marketing/insights");
            const data = await response.json();

            // Remove loading message
            document.getElementById(loadingId).remove();

            if (response.ok) {
              // Generate AI response based on message
              const aiResponse = generateAIResponse(message, data.analytics);
              addMarketingMessage("assistant", aiResponse);
            } else {
              addMarketingMessage(
                "assistant",
                "Sorry, I encountered an error while analyzing your data."
              );
            }
          } catch (error) {
            document.getElementById(loadingId).remove();
            addMarketingMessage(
              "assistant",
              "Sorry, I encountered an error while analyzing your data."
            );
          }
        }

        function generateAIResponse(message, analytics) {
          const lowerMessage = message.toLowerCase();

          if (
            lowerMessage.includes("roas") ||
            lowerMessage.includes("return on ad spend")
          ) {
            const bestPlatform = Object.keys(analytics.byPlatform).reduce(
              (best, platform) => {
                return analytics.byPlatform[platform].roas >
                  analytics.byPlatform[best]?.roas
                  ? platform
                  : best;
              },
              Object.keys(analytics.byPlatform)[0]
            );

            return `Your best performing platform for ROAS is ${bestPlatform} with ${analytics.byPlatform[
              bestPlatform
            ].roas.toFixed(
              2
            )}x return. Consider increasing budget allocation to this platform for better returns.`;
          }

          if (
            lowerMessage.includes("roi") ||
            lowerMessage.includes("return on investment")
          ) {
            const overallROI = analytics.summary.roi;
            if (overallROI > 100) {
              return `Your overall ROI is ${overallROI.toFixed(
                1
              )}%, which is excellent! This indicates very profitable marketing spend. Continue your current strategy while monitoring for optimization opportunities.`;
            } else {
              return `Your overall ROI is ${overallROI.toFixed(
                1
              )}%. Consider reviewing underperforming campaigns and reallocating budget to higher-performing channels.`;
            }
          }

          if (
            lowerMessage.includes("ctr") ||
            lowerMessage.includes("click through rate")
          ) {
            const avgCTR = analytics.summary.ctr;
            if (avgCTR < 1) {
              return `Your average CTR is ${avgCTR.toFixed(
                2
              )}%, which is below industry standards. I recommend reviewing your ad creative and targeting to improve engagement.`;
            } else {
              return `Your average CTR is ${avgCTR.toFixed(
                2
              )}%, which is performing well. Keep monitoring and testing new creative variations.`;
            }
          }

          return `Based on your marketing data, I can see ${analytics.summary.totalSpend.toLocaleString()} in total spend generating ${analytics.summary.totalRevenue.toLocaleString()} in revenue. Your overall ROAS is ${analytics.summary.roas.toFixed(2)}x. Would you like me to dive deeper into any specific metric or platform?`;
        }

        function addMarketingMessage(sender, content, isLoading = false) {
          const messagesContainer = document.getElementById(
            "marketingChatMessages"
          );
          const messageId = "msg-" + Date.now();

          const messageDiv = document.createElement("div");
          messageDiv.className = `message ${sender}`;
          messageDiv.id = messageId;

          const avatar = document.createElement("div");
          avatar.className = "message-avatar";
          avatar.textContent = sender === "user" ? "U" : "AI";

          const messageContent = document.createElement("div");
          messageContent.className = "message-content";
          messageContent.innerHTML = content;

          messageDiv.appendChild(avatar);
          messageDiv.appendChild(messageContent);
          messagesContainer.appendChild(messageDiv);

          messagesContainer.scrollTop = messagesContainer.scrollHeight;

          return messageId;
        }

        function loadMoreData() {
          // Implement pagination for data preview
          updateDataPreview();
        }

        function exportData() {
          // Implement data export functionality
          showSuccess("Export functionality coming soon!");
        }

        function showAIInsights() {
          // Scroll to insights section
          document
            .getElementById("insightsContainer")
            .scrollIntoView({ behavior: "smooth" });
        }

        function showLoading() {
          document.getElementById("loadingState").style.display = "flex";
          document.getElementById("dashboardContent").style.display = "none";
          document.getElementById("importState").style.display = "none";
        }

        function showImportState() {
          document.getElementById("loadingState").style.display = "none";
          document.getElementById("dashboardContent").style.display = "none";
          document.getElementById("importState").style.display = "block";
        }

        function hideLoading() {
          document.getElementById("loadingState").style.display = "none";
        }

        function showSuccess(message) {
          console.log("Success:", message);
        }

        function showError(message) {
          console.error("Error:", message);
        }
      });
    </script>
  </body>
</html>
