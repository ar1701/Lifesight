<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= title %></title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <link href="/css/modern.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  </head>
  <body>
    <div class="app-container">
      <%- include('partials/navbar', { currentPage: 'home' }) -%>

      <div class="main-layout-no-sidebar">
        <main class="main-content-full">
          <!-- Welcome Section for New Users -->
          <% if(!files || files.length === 0) { %>
          <div class="welcome-section">
            <div class="welcome-hero">
              <div class="hero-icon">
                <svg width="64" height="64" viewBox="0 0 24 24" fill="none">
                  <path
                    d="M3 13H11V3H3V13ZM3 21H11V15H3V21ZM13 21H21V11H13V21ZM13 3V9H21V3H13Z"
                    fill="currentColor"
                  />
                </svg>
              </div>
              <h1>Welcome to SaleSight Analytics</h1>
              <p class="hero-subtitle">
                Transform your data into actionable insights with AI-powered
                analytics
              </p>
            </div>

            <div class="getting-started">
              <h2>Getting Started in 3 Simple Steps</h2>
              <div class="steps-grid">
                <div class="step-card active" id="step1">
                  <div class="step-number">1</div>
                  <div class="step-content">
                    <h3>Upload Your Data</h3>
                    <p>
                      Start by uploading your CSV or Excel files. We support
                      various data formats.
                    </p>
                    <button
                      class="btn btn-primary"
                      onclick="showUploadSection()"
                    >
                      <i class="bi bi-upload me-2"></i>Upload Data
                    </button>
                  </div>
                </div>

                <div class="step-card" id="step2">
                  <div class="step-number">2</div>
                  <div class="step-content">
                    <h3>Generate Insights</h3>
                    <p>
                      Ask our AI to create charts, tables, and analyze your data
                      using natural language.
                    </p>
                    <div class="example-prompts">
                      <span class="prompt-tag">"Show me sales trends"</span>
                      <span class="prompt-tag">"Create a pie chart"</span>
                    </div>
                  </div>
                </div>

                <div class="step-card" id="step3">
                  <div class="step-number">3</div>
                  <div class="step-content">
                    <h3>Build Dashboards</h3>
                    <p>
                      Organize your insights into beautiful dashboards and share
                      them with your team.
                    </p>
                    <button
                      class="btn btn-outline"
                      onclick="showCreateDashboardModal()"
                    >
                      <i class="bi bi-plus-circle me-2"></i>Create Dashboard
                    </button>
                  </div>
                </div>
              </div>
            </div>

            <!-- Quick Upload Section -->
            <div class="quick-upload-section">
              <div
                class="upload-zone"
                onclick="document.getElementById('quick-file-input').click()"
              >
                <div class="upload-icon">
                  <svg width="48" height="48" viewBox="0 0 24 24" fill="none">
                    <path
                      d="M14 2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.89 22 5.99 22H18C19.1 22 20 21.1 20 20V8L14 2ZM18 20H6V4H13V9H18V20Z"
                      fill="currentColor"
                    />
                  </svg>
                </div>
                <h3>Drop your files here or click to browse</h3>
                <p>Supports CSV, XLSX files up to 10MB</p>
                <input
                  type="file"
                  id="quick-file-input"
                  accept=".csv,.xlsx,.xls"
                  style="display: none"
                  onchange="handleQuickUpload(this)"
                />
              </div>
            </div>
          </div>
          <% } else { %>

          <!-- Main Dashboard for Existing Users -->
          <div class="dashboard-section">
            <!-- Page Header with Stats -->
            <div class="page-header">
              <div class="header-content">
                <h1>Data Analytics Hub</h1>
                <p class="header-subtitle">
                  Manage your data files and create powerful visualizations
                </p>
              </div>
              <div class="header-stats">
                <div class="stat-item">
                  <div class="stat-number"><%= files.length %></div>
                  <div class="stat-label">Data Files</div>
                </div>
                <div class="stat-item">
                  <div class="stat-number"><%= dashboards.length %></div>
                  <div class="stat-label">Dashboards</div>
                </div>
              </div>
            </div>

            <!-- Quick Actions -->
            <div class="quick-actions">
              <button class="action-card" onclick="showUploadSection()">
                <div class="action-icon upload">
                  <i class="bi bi-upload"></i>
                </div>
                <div class="action-content">
                  <h3>Upload New Data</h3>
                  <p>Add CSV or Excel files</p>
                </div>
              </button>

              <button class="action-card" onclick="showCreateDashboardModal()">
                <div class="action-icon dashboard">
                  <i class="bi bi-grid-3x3"></i>
                </div>
                <div class="action-content">
                  <h3>Create Dashboard</h3>
                  <p>Organize your insights</p>
                </div>
              </button>

              <a href="/app/marketing" class="action-card">
                <div class="action-icon marketing">
                  <i class="bi bi-graph-up"></i>
                </div>
                <div class="action-content">
                  <h3>Marketing Analytics</h3>
                  <p>Advanced insights</p>
                </div>
              </a>
            </div>

            <!-- Files Grid -->
            <div class="content-grid">
              <!-- Files Section -->
              <div class="content-card files-card">
                <div class="card-header">
                  <h3><i class="bi bi-files me-2"></i>Your Data Files</h3>
                  <button
                    class="btn btn-sm btn-outline"
                    onclick="showUploadSection()"
                  >
                    <i class="bi bi-plus"></i> Add File
                  </button>
                </div>
                <div class="card-body">
                  <div class="files-grid">
                    <% files.forEach(file => { %>
                    <div class="file-card" data-file-id="<%= file._id %>">
                      <div class="file-icon">
                        <% if(file.originalName.endsWith('.csv')) { %>
                        <i class="bi bi-filetype-csv"></i>
                        <% } else { %>
                        <i class="bi bi-filetype-xlsx"></i>
                        <% } %>
                      </div>
                      <div class="file-info">
                        <h4><%= file.originalName %></h4>
                        <p>
                          Uploaded <%= new
                          Date(file.uploadDate).toLocaleDateString() %>
                        </p>
                      </div>
                      <div class="file-actions">
                        <button
                          class="action-btn preview-btn"
                          title="Preview Data"
                        >
                          <i class="bi bi-eye"></i>
                        </button>
                        <button
                          class="action-btn analyze-btn"
                          title="Analyze with AI"
                        >
                          <i class="bi bi-robot"></i>
                        </button>
                        <button
                          class="action-btn delete-btn"
                          title="Delete File"
                        >
                          <i class="bi bi-trash"></i>
                        </button>
                      </div>
                    </div>
                    <% }) %>
                  </div>
                </div>
              </div>

              <!-- Dashboards Section -->
              <div class="content-card dashboards-card">
                <div class="card-header">
                  <h3><i class="bi bi-grid-3x3 me-2"></i>Your Dashboards</h3>
                  <a href="/app/dashboards" class="btn btn-sm btn-outline">
                    View All <i class="bi bi-arrow-right ms-1"></i>
                  </a>
                </div>
                <div class="card-body">
                  <% if(dashboards && dashboards.length > 0) { %>
                  <div class="dashboards-grid">
                    <% dashboards.slice(0, 4).forEach(dashboard => { %>
                    <div
                      class="dashboard-card"
                      data-dashboard-id="<%= dashboard._id %>"
                    >
                      <div class="dashboard-header">
                        <div class="dashboard-icon">
                          <i class="bi bi-grid-3x3"></i>
                        </div>
                        <div class="dashboard-actions">
                          <button
                            class="action-btn edit-dashboard-btn"
                            title="Edit Dashboard"
                          >
                            <i class="bi bi-pencil"></i>
                          </button>
                          <button
                            class="action-btn delete-dashboard-btn"
                            title="Delete Dashboard"
                          >
                            <i class="bi bi-trash"></i>
                          </button>
                        </div>
                      </div>
                      <div
                        class="dashboard-info"
                        onclick="window.location.href='/app/dashboard/<%= dashboard._id %>'"
                      >
                        <h4><%= dashboard.name %></h4>
                        <p><%= dashboard.description || 'No description' %></p>
                        <div class="dashboard-meta">
                          <span
                            >Updated <%= new
                            Date(dashboard.updatedAt).toLocaleDateString()
                            %></span
                          >
                        </div>
                      </div>
                    </div>
                    <% }) %>
                  </div>
                  <% } else { %>
                  <div class="empty-state">
                    <i class="bi bi-grid-3x3"></i>
                    <h4>No dashboards yet</h4>
                    <p>
                      Create your first dashboard to organize your
                      visualizations
                    </p>
                    <button
                      class="btn btn-primary"
                      onclick="showCreateDashboardModal()"
                    >
                      Create Dashboard
                    </button>
                  </div>
                  <% } %>
                </div>
              </div>
            </div>
          </div>
          <% } %>

          <!-- Upload Modal -->
          <div class="modal fade" id="uploadModal" tabindex="-1">
            <div class="modal-dialog modal-lg">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title">Upload Data Files</h5>
                  <button
                    type="button"
                    class="btn-close"
                    data-bs-dismiss="modal"
                  ></button>
                </div>
                <div class="modal-body">
                  <form
                    action="/app/upload"
                    method="POST"
                    enctype="multipart/form-data"
                    id="upload-form"
                  >
                    <div class="upload-area">
                      <input
                        type="file"
                        name="dataFile"
                        id="file-input"
                        accept=".csv,.xlsx,.xls"
                        required
                        style="display: none"
                      />
                      <div
                        class="upload-dropzone"
                        onclick="document.getElementById('file-input').click()"
                      >
                        <div class="upload-icon">
                          <i class="bi bi-cloud-upload"></i>
                        </div>
                        <h4>Choose files or drag and drop</h4>
                        <p>CSV, XLSX files up to 10MB</p>
                        <button type="button" class="btn btn-primary">
                          Browse Files
                        </button>
                      </div>
                    </div>
                    <div class="upload-tips">
                      <h6>Tips for better results:</h6>
                      <ul>
                        <li>Include column headers in your first row</li>
                        <li>Use consistent date formats</li>
                        <li>Remove empty rows and columns</li>
                      </ul>
                    </div>
                  </form>
                </div>
                <div class="modal-footer">
                  <button
                    type="button"
                    class="btn btn-secondary"
                    data-bs-dismiss="modal"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    form="upload-form"
                    class="btn btn-primary"
                  >
                    Upload File
                  </button>
                </div>
              </div>
            </div>
          </div>

          <!-- AI Chat Modal -->
          <div class="modal fade" id="chatModal" tabindex="-1">
            <div class="modal-dialog modal-xl">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title">AI Data Analysis</h5>
                  <button
                    type="button"
                    class="btn-close"
                    data-bs-dismiss="modal"
                  ></button>
                </div>
                <div class="modal-body">
                  <div class="chat-interface">
                    <div class="chat-messages" id="chat-messages">
                      <div class="message assistant">
                        <div class="message-avatar">
                          <i class="bi bi-robot"></i>
                        </div>
                        <div class="message-content">
                          <h6>Hello! I'm your AI data analyst.</h6>
                          <p>
                            I can help you create charts, tables, and analyze
                            your data. Try asking me:
                          </p>
                          <div class="suggestion-chips">
                            <button
                              class="suggestion-chip"
                              onclick="sendSuggestion('Show me a summary table of the data')"
                            >
                              "Show me a summary table"
                            </button>
                            <button
                              class="suggestion-chip"
                              onclick="sendSuggestion('Create a bar chart showing trends')"
                            >
                              "Create a bar chart"
                            </button>
                            <button
                              class="suggestion-chip"
                              onclick="sendSuggestion('What are the key insights from this data?')"
                            >
                              "Key insights"
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="chat-input-area">
                      <div class="input-group">
                        <input
                          type="text"
                          id="chat-input"
                          class="form-control"
                          placeholder="Ask me anything about your data..."
                        />
                        <button class="btn btn-primary" id="send-btn">
                          <i class="bi bi-send"></i>
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Edit Dashboard Modal -->
          <div class="modal fade" id="editDashboardModal" tabindex="-1">
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title">Edit Dashboard</h5>
                  <button
                    type="button"
                    class="btn-close"
                    data-bs-dismiss="modal"
                  ></button>
                </div>
                <div class="modal-body">
                  <form id="editDashboardForm">
                    <div class="form-group mb-3">
                      <label class="form-label">Dashboard Name</label>
                      <input
                        type="text"
                        class="form-control"
                        id="editDashboardName"
                        required
                      />
                    </div>
                    <div class="form-group mb-3">
                      <label class="form-label">Description (Optional)</label>
                      <textarea
                        class="form-control"
                        id="editDashboardDescription"
                        rows="3"
                      ></textarea>
                    </div>
                  </form>
                </div>
                <div class="modal-footer">
                  <button
                    type="button"
                    class="btn btn-secondary"
                    data-bs-dismiss="modal"
                  >
                    Cancel
                  </button>
                  <button
                    type="button"
                    class="btn btn-primary"
                    id="updateDashboardBtn"
                  >
                    Update Dashboard
                  </button>
                </div>
              </div>
            </div>
          </div>

          <!-- Create Dashboard Modal -->
          <div class="modal fade" id="createDashboardModal" tabindex="-1">
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title">Create New Dashboard</h5>
                  <button
                    type="button"
                    class="btn-close"
                    data-bs-dismiss="modal"
                  ></button>
                </div>
                <div class="modal-body">
                  <form id="createDashboardForm">
                    <div class="form-group mb-3">
                      <label class="form-label">Dashboard Name</label>
                      <input
                        type="text"
                        class="form-control"
                        id="dashboardName"
                        placeholder="e.g., Sales Analytics"
                        required
                      />
                    </div>
                    <div class="form-group mb-3">
                      <label class="form-label">Description (Optional)</label>
                      <textarea
                        class="form-control"
                        id="dashboardDescription"
                        rows="3"
                        placeholder="Brief description of what this dashboard will contain..."
                      ></textarea>
                    </div>
                    <div class="dashboard-templates">
                      <label class="form-label"
                        >Choose a template (Optional)</label
                      >
                      <div class="template-grid">
                        <div class="template-card" data-template="general">
                          <i class="bi bi-grid-3x3"></i>
                          <span>General Analytics</span>
                        </div>
                        <div class="template-card" data-template="sales">
                          <i class="bi bi-graph-up"></i>
                          <span>Sales Dashboard</span>
                        </div>
                        <div class="template-card" data-template="marketing">
                          <i class="bi bi-megaphone"></i>
                          <span>Marketing Metrics</span>
                        </div>
                      </div>
                    </div>
                  </form>
                </div>
                <div class="modal-footer">
                  <button
                    type="button"
                    class="btn btn-secondary"
                    data-bs-dismiss="modal"
                  >
                    Cancel
                  </button>
                  <button
                    type="button"
                    class="btn btn-primary"
                    id="createDashboardBtn"
                  >
                    Create Dashboard
                  </button>
                </div>
              </div>
            </div>
          </div>

          <!-- Dashboard Selection Modal -->
          <div class="modal fade" id="dashboardSelectionModal" tabindex="-1">
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title">Add Widget to Dashboard</h5>
                  <button
                    type="button"
                    class="btn-close"
                    data-bs-dismiss="modal"
                  ></button>
                </div>
                <div class="modal-body">
                  <p class="mb-3">Select a dashboard to add this widget to:</p>
                  <div
                    id="dashboard-selection-list"
                    class="dashboard-selection-grid"
                  >
                    <!-- Dashboards will be populated here -->
                  </div>
                  <div class="mt-3">
                    <button
                      class="btn btn-outline-primary btn-sm"
                      onclick="showCreateDashboardFromWidget()"
                    >
                      <i class="bi bi-plus-circle me-2"></i>Create New Dashboard
                    </button>
                  </div>
                </div>
                <div class="modal-footer">
                  <button
                    type="button"
                    class="btn btn-secondary"
                    data-bs-dismiss="modal"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            </div>
          </div>

          <!-- Preview Modal -->
          <div class="modal fade" id="previewModal" tabindex="-1">
            <div class="modal-dialog modal-xl">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title">Data Preview</h5>
                  <button
                    type="button"
                    class="btn-close"
                    data-bs-dismiss="modal"
                  ></button>
                </div>
                <div class="modal-body">
                  <div id="preview-content"></div>
                </div>
              </div>
            </div>
          </div>
        </main>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      // Global variables
      let selectedFileId = null;
      let editingDashboardId = null;
      let currentWidgetData = null;
      let chatModal = null;
      let dashboardSelectionModal = null;

      // Initialize
      document.addEventListener("DOMContentLoaded", function () {
        initializeEventListeners();
        chatModal = new bootstrap.Modal(document.getElementById("chatModal"));
        dashboardSelectionModal = new bootstrap.Modal(
          document.getElementById("dashboardSelectionModal")
        );
      });

      function initializeEventListeners() {
        // File actions
        document.addEventListener("click", handleFileActions);

        // Dashboard actions
        document.addEventListener("click", handleDashboardActions);

        // Chat functionality
        document
          .getElementById("send-btn")
          .addEventListener("click", sendMessage);
        document
          .getElementById("chat-input")
          .addEventListener("keypress", function (e) {
            if (e.key === "Enter") sendMessage();
          });

        // Dashboard creation
        document
          .getElementById("createDashboardBtn")
          .addEventListener("click", createDashboard);
        document
          .getElementById("updateDashboardBtn")
          .addEventListener("click", updateDashboard);

        // Template selection
        document.querySelectorAll(".template-card").forEach((card) => {
          card.addEventListener("click", function () {
            document
              .querySelectorAll(".template-card")
              .forEach((c) => c.classList.remove("selected"));
            this.classList.add("selected");
          });
        });
      }

      function handleFileActions(e) {
        const target = e.target.closest("button");
        if (!target) return;

        const fileCard = target.closest(".file-card");
        if (!fileCard) return;

        const fileId = fileCard.dataset.fileId;

        if (target.classList.contains("preview-btn")) {
          previewFile(fileId);
        } else if (target.classList.contains("analyze-btn")) {
          analyzeFile(fileId, fileCard);
        } else if (target.classList.contains("delete-btn")) {
          deleteFile(fileId, fileCard);
        }
      }

      function handleDashboardActions(e) {
        const target = e.target.closest("button");
        if (!target) return;

        const dashboardCard = target.closest(".dashboard-card");
        if (!dashboardCard) return;

        const dashboardId = dashboardCard.dataset.dashboardId;

        if (target.classList.contains("edit-dashboard-btn")) {
          editDashboard(dashboardId, dashboardCard);
        } else if (target.classList.contains("delete-dashboard-btn")) {
          deleteDashboard(dashboardId, dashboardCard);
        }
      }

      function analyzeFile(fileId, fileCard) {
        selectedFileId = fileId;
        const fileName = fileCard.querySelector("h4").textContent;

        // Update chat modal title
        document.querySelector(
          "#chatModal .modal-title"
        ).textContent = `Analyzing: ${fileName}`;

        // Clear previous messages except the welcome message
        const messagesContainer = document.getElementById("chat-messages");
        const welcomeMessage =
          messagesContainer.querySelector(".message.assistant");
        messagesContainer.innerHTML = "";
        messagesContainer.appendChild(welcomeMessage);

        // Show chat modal
        chatModal.show();
      }

      function previewFile(fileId) {
        fetch(`/app/preview/${fileId}?page=1`)
          .then((response) => response.json())
          .then((data) => {
            if (data.data && Array.isArray(data.data)) {
              let html = '<div class="table-responsive">';
              html += '<table class="table table-striped table-hover">';

              if (data.data.length > 0) {
                const headers = Object.keys(data.data[0]);
                html += '<thead class="table-dark"><tr>';
                headers.forEach((header) => {
                  html += `<th>${header}</th>`;
                });
                html += "</tr></thead>";

                html += "<tbody>";
                data.data.slice(0, 50).forEach((row) => {
                  // Show only first 50 rows
                  html += "<tr>";
                  headers.forEach((header) => {
                    html += `<td>${row[header] || ""}</td>`;
                  });
                  html += "</tr>";
                });
                html += "</tbody>";
              }

              html += "</table></div>";

              if (data.totalRows > 50) {
                html += `<div class="mt-3 text-center">
                  <small class="text-muted">Showing first 50 of ${data.totalRows} rows</small>
                </div>`;
              }

              document.getElementById("preview-content").innerHTML = html;
              new bootstrap.Modal(
                document.getElementById("previewModal")
              ).show();
            } else {
              showToast("Error loading preview", "error");
            }
          })
          .catch((error) => {
            console.error("Error:", error);
            showToast("Error loading preview", "error");
          });
      }

      async function deleteFile(fileId, fileCard) {
        if (
          !confirm(
            "Are you sure you want to delete this file? This action cannot be undone."
          )
        ) {
          return;
        }

        try {
          const response = await fetch(`/app/file/${fileId}`, {
            method: "DELETE",
          });
          const result = await response.json();

          if (response.ok) {
            fileCard.remove();
            showToast("File deleted successfully", "success");
          } else {
            throw new Error(result.error || "Failed to delete file");
          }
        } catch (error) {
          console.error("Error deleting file:", error);
          showToast(`Error deleting file: ${error.message}`, "error");
        }
      }

      function sendSuggestion(text) {
        document.getElementById("chat-input").value = text;
        sendMessage();
      }

      async function sendMessage() {
        const input = document.getElementById("chat-input");
        const message = input.value.trim();

        if (!message || !selectedFileId) return;

        addMessage("user", message);
        input.value = "";

        const loadingId = addMessage(
          "assistant",
          "Analyzing your data...",
          true
        );

        try {
          const response = await fetch("/app/generate-insight", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              prompt: message,
              fileId: selectedFileId,
            }),
          });

          const result = await response.json();
          document.getElementById(loadingId).remove();

          if (response.ok) {
            let responseText = "";
            if (result.message) {
              responseText = result.message;
            } else if (result.type === "error") {
              responseText = result.message || "An error occurred";
            } else {
              if (result.type === "chart") {
                responseText = `Generated a ${
                  result.chartType || "chart"
                } visualization.`;
              } else if (result.type === "table") {
                responseText = `Generated a table with ${
                  result.data?.rows?.length || 0
                } rows.`;
              } else {
                responseText = "Analysis complete.";
              }
            }

            addMessage("assistant", responseText);

            if (result.type === "chart" && result.config) {
              renderChartInChat(result);
              showAddToDashboardButton(result);
            } else if (result.type === "table" && result.data) {
              renderTableInChat(result);
              showAddToDashboardButton(result);
            }
          } else {
            addMessage(
              "assistant",
              `Error: ${result.error || "Something went wrong"}`
            );
          }
        } catch (error) {
          document.getElementById(loadingId).remove();
          addMessage("assistant", `Error: ${error.message}`);
        }
      }

      function addMessage(sender, content, isLoading = false) {
        const messagesContainer = document.getElementById("chat-messages");
        const messageId = "msg-" + Date.now();

        const messageDiv = document.createElement("div");
        messageDiv.className = `message ${sender}`;
        messageDiv.id = messageId;

        const avatar = document.createElement("div");
        avatar.className = "message-avatar";
        avatar.innerHTML =
          sender === "user"
            ? '<i class="bi bi-person"></i>'
            : '<i class="bi bi-robot"></i>';

        const messageContent = document.createElement("div");
        messageContent.className = "message-content";
        messageContent.innerHTML = content;

        if (isLoading) {
          messageContent.innerHTML +=
            '<div class="typing-indicator"><span></span><span></span><span></span></div>';
        }

        messageDiv.appendChild(avatar);
        messageDiv.appendChild(messageContent);
        messagesContainer.appendChild(messageDiv);

        messagesContainer.scrollTop = messagesContainer.scrollHeight;
        return messageId;
      }

      function renderChartInChat(chartData) {
        const messagesContainer = document.getElementById("chat-messages");
        const chartContainer = document.createElement("div");
        chartContainer.className = "message assistant chart-message";

        // Create a simple canvas instead of iframe for now
        const canvas = document.createElement("canvas");
        canvas.width = 500;
        canvas.height = 350;
        canvas.style.cssText =
          "max-width: 100%; border: 1px solid #ddd; border-radius: 8px;";

        chartContainer.appendChild(canvas);
        messagesContainer.appendChild(chartContainer);

        try {
          new Chart(canvas.getContext("2d"), chartData.config);
        } catch (error) {
          console.error("Error rendering chart:", error);
          chartContainer.innerHTML =
            '<p class="text-muted">Error rendering chart</p>';
        }

        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }

      function renderTableInChat(tableData) {
        const messagesContainer = document.getElementById("chat-messages");
        const tableContainer = document.createElement("div");
        tableContainer.className = "message assistant table-message";

        if (tableData.data && tableData.data.headers && tableData.data.rows) {
          // Create table directly without iframe for now
          const tableDiv = document.createElement("div");
          tableDiv.className = "table-responsive";
          tableDiv.style.cssText =
            "max-height: 400px; overflow: auto; border: 1px solid #ddd; border-radius: 8px; background: white;";

          const table = document.createElement("table");
          table.className = "table table-striped table-hover mb-0";

          // Create header
          const thead = document.createElement("thead");
          const headerRow = document.createElement("tr");
          tableData.data.headers.forEach((header) => {
            const th = document.createElement("th");
            th.textContent = header;
            th.style.backgroundColor = "#f8f9fa";
            headerRow.appendChild(th);
          });
          thead.appendChild(headerRow);
          table.appendChild(thead);

          // Create body
          const tbody = document.createElement("tbody");
          tableData.data.rows.forEach((row) => {
            const tr = document.createElement("tr");
            row.forEach((cell) => {
              const td = document.createElement("td");
              td.textContent = cell || "";
              tr.appendChild(td);
            });
            tbody.appendChild(tr);
          });
          table.appendChild(tbody);

          tableDiv.appendChild(table);
          tableContainer.appendChild(tableDiv);
        }

        messagesContainer.appendChild(tableContainer);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }

      function showAddToDashboardButton(widgetData) {
        const messagesContainer = document.getElementById("chat-messages");
        const buttonContainer = document.createElement("div");
        buttonContainer.className = "message assistant add-dashboard-message";

        // Create button element directly to avoid JSON escaping issues
        const buttonWrapper = document.createElement("div");
        buttonWrapper.className = "d-flex justify-content-center mt-3";

        const button = document.createElement("button");
        button.className = "btn btn-success btn-sm add-widget-btn";
        button.innerHTML =
          '<i class="bi bi-plus-circle me-2"></i>Add to Dashboard';

        // Store widget data as a property of the button
        button.widgetData = widgetData;

        // Add click event listener
        button.addEventListener("click", function () {
          console.log("Add to Dashboard button clicked");
          showDashboardSelection(this.widgetData);
        });

        buttonWrapper.appendChild(button);
        buttonContainer.appendChild(buttonWrapper);

        messagesContainer.appendChild(buttonContainer);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }

      function showDashboardSelection(widgetData) {
        console.log("showDashboardSelection called with:", widgetData);
        currentWidgetData = widgetData;

        // Populate dashboard selection modal
        populateDashboardSelection();

        // Show the modal
        if (dashboardSelectionModal) {
          dashboardSelectionModal.show();
        } else {
          console.error("dashboardSelectionModal not initialized");
        }
      }

      async function populateDashboardSelection() {
        const dashboardList = document.getElementById(
          "dashboard-selection-list"
        );

        try {
          // Get dashboards from the server
          const response = await fetch("/api/dashboards");
          const dashboards = await response.json();

          if (dashboards.length === 0) {
            dashboardList.innerHTML =
              '<div class="text-center p-4">' +
              '<i class="bi bi-grid-3x3 text-muted" style="font-size: 2rem;"></i>' +
              '<p class="mt-2 text-muted">No dashboards available</p>' +
              '<p class="small text-muted">Create a new dashboard to add widgets</p>' +
              "</div>";
            return;
          }

          let html = "";
          dashboards.forEach((dashboard) => {
            html +=
              '<div class="dashboard-selection-item" onclick="selectDashboard(\'' +
              dashboard._id +
              "', '" +
              dashboard.name +
              "')\">" +
              '<div class="dashboard-selection-icon">' +
              '<i class="bi bi-grid-3x3"></i>' +
              "</div>" +
              '<div class="dashboard-selection-info">' +
              "<h6>" +
              dashboard.name +
              "</h6>" +
              '<small class="text-muted">' +
              (dashboard.description || "No description") +
              "</small>" +
              "</div>" +
              "</div>";
          });

          dashboardList.innerHTML = html;
        } catch (error) {
          console.error("Error fetching dashboards:", error);
          dashboardList.innerHTML =
            '<div class="text-center p-4 text-danger">' +
            '<i class="bi bi-exclamation-triangle"></i>' +
            '<p class="mt-2">Error loading dashboards</p>' +
            "</div>";
        }
      }

      async function selectDashboard(dashboardId, dashboardName) {
        if (!currentWidgetData) {
          showToast("Widget data not found", "error");
          return;
        }

        try {
          const response = await fetch("/api/widgets", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              ...currentWidgetData,
              dashboardId: dashboardId,
            }),
          });

          const result = await response.json();

          if (response.ok) {
            dashboardSelectionModal.hide();
            showToast(
              `Widget added to "${dashboardName}" successfully!`,
              "success"
            );
          } else {
            throw new Error(result.error || "Failed to add widget");
          }
        } catch (error) {
          console.error("Error adding widget:", error);
          showToast(`Error adding widget: ${error.message}`, "error");
        }
      }

      function showCreateDashboardFromWidget() {
        dashboardSelectionModal.hide();
        showCreateDashboardModal();
      }

      async function createDashboard() {
        const name = document.getElementById("dashboardName").value.trim();
        const description = document
          .getElementById("dashboardDescription")
          .value.trim();
        const selectedTemplate = document.querySelector(
          ".template-card.selected"
        )?.dataset.template;

        if (!name) {
          showToast("Please enter a dashboard name", "error");
          return;
        }

        try {
          const response = await fetch("/api/dashboards", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              name,
              description,
              template: selectedTemplate,
            }),
          });

          const result = await response.json();

          if (response.ok) {
            bootstrap.Modal.getInstance(
              document.getElementById("createDashboardModal")
            ).hide();
            document.getElementById("createDashboardForm").reset();
            document
              .querySelectorAll(".template-card")
              .forEach((c) => c.classList.remove("selected"));

            showToast(
              `Dashboard "${result.name}" created successfully!`,
              "success"
            );

            // If widget data exists, show dashboard selection again
            if (currentWidgetData) {
              setTimeout(() => {
                populateDashboardSelection();
                dashboardSelectionModal.show();
              }, 500);
            } else {
              setTimeout(() => location.reload(), 1500);
            }
          } else {
            throw new Error(result.error || "Failed to create dashboard");
          }
        } catch (error) {
          console.error("Error creating dashboard:", error);
          showToast(`Error creating dashboard: ${error.message}`, "error");
        }
      }

      function handleQuickUpload(input) {
        if (input.files && input.files[0]) {
          // Create a form and submit it
          const formData = new FormData();
          formData.append("dataFile", input.files[0]);

          fetch("/app/upload", {
            method: "POST",
            body: formData,
          })
            .then((response) => {
              if (response.ok) {
                showToast("File uploaded successfully!", "success");
                setTimeout(() => location.reload(), 1500);
              } else {
                throw new Error("Upload failed");
              }
            })
            .catch((error) => {
              showToast("Error uploading file", "error");
            });
        }
      }

      function showUploadSection() {
        new bootstrap.Modal(document.getElementById("uploadModal")).show();
      }

      function showCreateDashboardModal() {
        new bootstrap.Modal(
          document.getElementById("createDashboardModal")
        ).show();
      }

      function editDashboard(dashboardId, dashboardCard) {
        editingDashboardId = dashboardId;
        const name = dashboardCard.querySelector("h4").textContent;
        const description = dashboardCard.querySelector("p").textContent;

        document.getElementById("editDashboardName").value = name;
        document.getElementById("editDashboardDescription").value =
          description === "No description" ? "" : description;

        new bootstrap.Modal(
          document.getElementById("editDashboardModal")
        ).show();
      }

      async function updateDashboard() {
        const name = document.getElementById("editDashboardName").value.trim();
        const description = document
          .getElementById("editDashboardDescription")
          .value.trim();

        if (!name) {
          showToast("Please enter a dashboard name", "error");
          return;
        }

        try {
          const response = await fetch(
            `/api/dashboards/${editingDashboardId}`,
            {
              method: "PUT",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ name, description }),
            }
          );

          const result = await response.json();

          if (response.ok) {
            bootstrap.Modal.getInstance(
              document.getElementById("editDashboardModal")
            ).hide();

            showToast(
              `Dashboard "${result.name}" updated successfully!`,
              "success"
            );
            setTimeout(() => location.reload(), 1500);
          } else {
            throw new Error(result.error || "Failed to update dashboard");
          }
        } catch (error) {
          console.error("Error updating dashboard:", error);
          showToast(`Error updating dashboard: ${error.message}`, "error");
        }
      }

      async function deleteDashboard(dashboardId, dashboardCard) {
        const name = dashboardCard.querySelector("h4").textContent;

        if (
          !confirm(
            `Are you sure you want to delete "${name}"? This will also delete all widgets in this dashboard. This action cannot be undone.`
          )
        ) {
          return;
        }

        try {
          const response = await fetch(`/api/dashboards/${dashboardId}`, {
            method: "DELETE",
          });

          const result = await response.json();

          if (response.ok) {
            dashboardCard.remove();
            showToast("Dashboard deleted successfully", "success");

            // Remove from chat dashboard select if it exists
            const select = document.getElementById("chat-dashboard-select");
            if (select) {
              const option = select.querySelector(
                `option[value="${dashboardId}"]`
              );
              if (option) option.remove();
            }
          } else {
            throw new Error(result.error || "Failed to delete dashboard");
          }
        } catch (error) {
          console.error("Error deleting dashboard:", error);
          showToast(`Error deleting dashboard: ${error.message}`, "error");
        }
      }

      function showToast(message, type = "info") {
        const toast = document.createElement("div");
        toast.className = "toast-notification toast-" + type;
        const iconType =
          type === "success"
            ? "check-circle"
            : type === "error"
            ? "exclamation-circle"
            : "info-circle";
        toast.innerHTML =
          '<div class="toast-content">' +
          '<i class="bi bi-' +
          iconType +
          '"></i>' +
          "<span>" +
          message +
          "</span>" +
          "</div>" +
          '<button onclick="this.parentElement.remove()">' +
          '<i class="bi bi-x"></i>' +
          "</button>";

        document.body.appendChild(toast);

        setTimeout(() => {
          if (toast.parentElement) {
            toast.remove();
          }
        }, 5000);
      }
    </script>
  </body>
</html>
